//
// SessionAuthenticationMethod.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A singular authenticator used during authentication / login. */
public struct SessionAuthenticationMethod: Codable, JSONEncodable, Hashable {

    public enum Method: String, Codable, CaseIterable {
        case linkRecovery = "link_recovery"
        case codeRecovery = "code_recovery"
        case password = "password"
        case totp = "totp"
        case oidc = "oidc"
        case webauthn = "webauthn"
        case lookupSecret = "lookup_secret"
        case v0Period6LegacySession = "v0.6_legacy_session"
    }
    public var aal: AuthenticatorAssuranceLevel?
    /** When the authentication challenge was completed. */
    public var completedAt: Date?
    public var method: Method?

    public init(aal: AuthenticatorAssuranceLevel? = nil, completedAt: Date? = nil, method: Method? = nil) {
        self.aal = aal
        self.completedAt = completedAt
        self.method = method
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case aal
        case completedAt = "completed_at"
        case method
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(aal, forKey: .aal)
        try container.encodeIfPresent(completedAt, forKey: .completedAt)
        try container.encodeIfPresent(method, forKey: .method)
    }
}

