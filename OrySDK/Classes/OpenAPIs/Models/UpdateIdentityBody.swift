//
// UpdateIdentityBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Update Identity Body */
public struct UpdateIdentityBody: Codable, JSONEncodable, Hashable {

    public var credentials: IdentityWithCredentials?
    /** Store metadata about the user which is only accessible through admin APIs such as `GET /admin/identities/<id>`. */
    public var metadataAdmin: AnyCodable?
    /** Store metadata about the identity which the identity itself can see when calling for example the session endpoint. Do not store sensitive information (e.g. credit score) about the identity in this field. */
    public var metadataPublic: AnyCodable?
    /** SchemaID is the ID of the JSON Schema to be used for validating the identity's traits. If set will update the Identity's SchemaID. */
    public var schemaId: String
    public var state: IdentityState
    /** Traits represent an identity's traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_id`. */
    public var traits: AnyCodable

    public init(credentials: IdentityWithCredentials? = nil, metadataAdmin: AnyCodable? = nil, metadataPublic: AnyCodable? = nil, schemaId: String, state: IdentityState, traits: AnyCodable) {
        self.credentials = credentials
        self.metadataAdmin = metadataAdmin
        self.metadataPublic = metadataPublic
        self.schemaId = schemaId
        self.state = state
        self.traits = traits
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case credentials
        case metadataAdmin = "metadata_admin"
        case metadataPublic = "metadata_public"
        case schemaId = "schema_id"
        case state
        case traits
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(credentials, forKey: .credentials)
        try container.encodeIfPresent(metadataAdmin, forKey: .metadataAdmin)
        try container.encodeIfPresent(metadataPublic, forKey: .metadataPublic)
        try container.encode(schemaId, forKey: .schemaId)
        try container.encode(state, forKey: .state)
        try container.encode(traits, forKey: .traits)
    }
}

