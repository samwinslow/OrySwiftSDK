//
// UiNodeInputAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** InputAttributes represents the attributes of an input node */
public struct UiNodeInputAttributes: Codable, JSONEncodable, Hashable {

    public enum Autocomplete: String, Codable, CaseIterable {
        case email = "email"
        case tel = "tel"
        case url = "url"
        case currentPassword = "current-password"
        case newPassword = "new-password"
        case oneTimeCode = "one-time-code"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case text = "text"
        case password = "password"
        case number = "number"
        case checkbox = "checkbox"
        case hidden = "hidden"
        case email = "email"
        case tel = "tel"
        case submit = "submit"
        case button = "button"
        case datetimeLocal = "datetime-local"
        case date = "date"
        case url = "url"
    }
    /** The autocomplete attribute for the input. email InputAttributeAutocompleteEmail tel InputAttributeAutocompleteTel url InputAttributeAutocompleteUrl current-password InputAttributeAutocompleteCurrentPassword new-password InputAttributeAutocompleteNewPassword one-time-code InputAttributeAutocompleteOneTimeCode */
    public var autocomplete: Autocomplete?
    /** Sets the input's disabled field to true or false. */
    public var disabled: Bool
    public var label: UiText?
    /** The input's element name. */
    public var name: String
    /** NodeType represents this node's types. It is a mirror of `node.type` and is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is \"input\". */
    public var nodeType: String
    /** OnClick may contain javascript which should be executed on click. This is primarily used for WebAuthn. */
    public var onclick: String?
    /** The input's pattern. */
    public var pattern: String?
    /** Mark this input field as required. */
    public var _required: Bool?
    /** The input's element type. text InputAttributeTypeText password InputAttributeTypePassword number InputAttributeTypeNumber checkbox InputAttributeTypeCheckbox hidden InputAttributeTypeHidden email InputAttributeTypeEmail tel InputAttributeTypeTel submit InputAttributeTypeSubmit button InputAttributeTypeButton datetime-local InputAttributeTypeDateTimeLocal date InputAttributeTypeDate url InputAttributeTypeURI */
    public var type: ModelType
    /** The input's value. */
    public var value: AnyCodable?

    public init(autocomplete: Autocomplete? = nil, disabled: Bool, label: UiText? = nil, name: String, nodeType: String, onclick: String? = nil, pattern: String? = nil, _required: Bool? = nil, type: ModelType, value: AnyCodable? = nil) {
        self.autocomplete = autocomplete
        self.disabled = disabled
        self.label = label
        self.name = name
        self.nodeType = nodeType
        self.onclick = onclick
        self.pattern = pattern
        self._required = _required
        self.type = type
        self.value = value
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case autocomplete
        case disabled
        case label
        case name
        case nodeType = "node_type"
        case onclick
        case pattern
        case _required = "required"
        case type
        case value
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(autocomplete, forKey: .autocomplete)
        try container.encode(disabled, forKey: .disabled)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encode(name, forKey: .name)
        try container.encode(nodeType, forKey: .nodeType)
        try container.encodeIfPresent(onclick, forKey: .onclick)
        try container.encodeIfPresent(pattern, forKey: .pattern)
        try container.encodeIfPresent(_required, forKey: ._required)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(value, forKey: .value)
    }
}

