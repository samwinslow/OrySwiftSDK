//
// Session.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Session */
public struct Session: Codable, JSONEncodable, Hashable {

    /** Active state. If false the session is no longer active. */
    public var active: Bool?
    /** The Session Authentication Timestamp  When this session was authenticated at. If multi-factor authentication was used this is the time when the last factor was authenticated (e.g. the TOTP code challenge was completed). */
    public var authenticatedAt: Date?
    /** A list of authenticators which were used to authenticate the session. */
    public var authenticationMethods: [SessionAuthenticationMethod]?
    public var authenticatorAssuranceLevel: AuthenticatorAssuranceLevel?
    /** Devices has history of all endpoints where the session was used */
    public var devices: [SessionDevice]?
    /** The Session Expiry  When this session expires at. */
    public var expiresAt: Date?
    /** Session ID */
    public var id: String
    public var identity: Identity
    /** The Session Issuance Timestamp  When this session was issued at. Usually equal or close to `authenticated_at`. */
    public var issuedAt: Date?

    public init(active: Bool? = nil, authenticatedAt: Date? = nil, authenticationMethods: [SessionAuthenticationMethod]? = nil, authenticatorAssuranceLevel: AuthenticatorAssuranceLevel? = nil, devices: [SessionDevice]? = nil, expiresAt: Date? = nil, id: String, identity: Identity, issuedAt: Date? = nil) {
        self.active = active
        self.authenticatedAt = authenticatedAt
        self.authenticationMethods = authenticationMethods
        self.authenticatorAssuranceLevel = authenticatorAssuranceLevel
        self.devices = devices
        self.expiresAt = expiresAt
        self.id = id
        self.identity = identity
        self.issuedAt = issuedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case active
        case authenticatedAt = "authenticated_at"
        case authenticationMethods = "authentication_methods"
        case authenticatorAssuranceLevel = "authenticator_assurance_level"
        case devices
        case expiresAt = "expires_at"
        case id
        case identity
        case issuedAt = "issued_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(authenticatedAt, forKey: .authenticatedAt)
        try container.encodeIfPresent(authenticationMethods, forKey: .authenticationMethods)
        try container.encodeIfPresent(authenticatorAssuranceLevel, forKey: .authenticatorAssuranceLevel)
        try container.encodeIfPresent(devices, forKey: .devices)
        try container.encodeIfPresent(expiresAt, forKey: .expiresAt)
        try container.encode(id, forKey: .id)
        try container.encode(identity, forKey: .identity)
        try container.encodeIfPresent(issuedAt, forKey: .issuedAt)
    }
}

