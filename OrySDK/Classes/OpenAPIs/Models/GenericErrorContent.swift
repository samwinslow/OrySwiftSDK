//
// GenericErrorContent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Error response */
public struct GenericErrorContent: Codable, JSONEncodable, Hashable {

    /** Debug contains debug information. This is usually not available and has to be enabled. */
    public var debug: String?
    /** Name is the error name. */
    public var error: String?
    /** Description contains further information on the nature of the error. */
    public var errorDescription: String?
    /** Message contains the error message. */
    public var message: String?
    /** Code represents the error status code (404, 403, 401, ...). */
    public var statusCode: Int64?

    public init(debug: String? = nil, error: String? = nil, errorDescription: String? = nil, message: String? = nil, statusCode: Int64? = nil) {
        self.debug = debug
        self.error = error
        self.errorDescription = errorDescription
        self.message = message
        self.statusCode = statusCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case debug
        case error
        case errorDescription = "error_description"
        case message
        case statusCode = "status_code"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(debug, forKey: .debug)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encodeIfPresent(errorDescription, forKey: .errorDescription)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(statusCode, forKey: .statusCode)
    }
}

