//
// OAuth2LogoutRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OAuth2LogoutRequest: Codable, JSONEncodable, Hashable {

    /** Challenge is the identifier (\"logout challenge\") of the logout authentication request. It is used to identify the session. */
    public var challenge: String?
    public var client: OAuth2Client?
    /** RequestURL is the original Logout URL requested. */
    public var requestUrl: String?
    /** RPInitiated is set to true if the request was initiated by a Relying Party (RP), also known as an OAuth 2.0 Client. */
    public var rpInitiated: Bool?
    /** SessionID is the login session ID that was requested to log out. */
    public var sid: String?
    /** Subject is the user for whom the logout was request. */
    public var subject: String?

    public init(challenge: String? = nil, client: OAuth2Client? = nil, requestUrl: String? = nil, rpInitiated: Bool? = nil, sid: String? = nil, subject: String? = nil) {
        self.challenge = challenge
        self.client = client
        self.requestUrl = requestUrl
        self.rpInitiated = rpInitiated
        self.sid = sid
        self.subject = subject
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case challenge
        case client
        case requestUrl = "request_url"
        case rpInitiated = "rp_initiated"
        case sid
        case subject
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(challenge, forKey: .challenge)
        try container.encodeIfPresent(client, forKey: .client)
        try container.encodeIfPresent(requestUrl, forKey: .requestUrl)
        try container.encodeIfPresent(rpInitiated, forKey: .rpInitiated)
        try container.encodeIfPresent(sid, forKey: .sid)
        try container.encodeIfPresent(subject, forKey: .subject)
    }
}

