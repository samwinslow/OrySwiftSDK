//
// ErrorOAuth2.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Error */
public struct ErrorOAuth2: Codable, JSONEncodable, Hashable {

    /** Error */
    public var error: String?
    /** Error Debug Information  Only available in dev mode. */
    public var errorDebug: String?
    /** Error Description */
    public var errorDescription: String?
    /** Error Hint  Helps the user identify the error cause. */
    public var errorHint: String?
    /** HTTP Status Code */
    public var statusCode: Int64?

    public init(error: String? = nil, errorDebug: String? = nil, errorDescription: String? = nil, errorHint: String? = nil, statusCode: Int64? = nil) {
        self.error = error
        self.errorDebug = errorDebug
        self.errorDescription = errorDescription
        self.errorHint = errorHint
        self.statusCode = statusCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case error
        case errorDebug = "error_debug"
        case errorDescription = "error_description"
        case errorHint = "error_hint"
        case statusCode = "status_code"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encodeIfPresent(errorDebug, forKey: .errorDebug)
        try container.encodeIfPresent(errorDescription, forKey: .errorDescription)
        try container.encodeIfPresent(errorHint, forKey: .errorHint)
        try container.encodeIfPresent(statusCode, forKey: .statusCode)
    }
}

