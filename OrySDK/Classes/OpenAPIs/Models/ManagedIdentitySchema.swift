//
// ManagedIdentitySchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Together the name and identity uuid are a unique index constraint. This prevents a user from having schemas with the same name. This also allows schemas to have the same name across the system. */
public struct ManagedIdentitySchema: Codable, JSONEncodable, Hashable {

    /** The gcs file name  This is a randomly generated name which is used to uniquely identify the file on the blob storage */
    public var blobName: String
    /** The publicly accessible url of the schema */
    public var blobUrl: String
    /** The Content Hash  Contains a hash of the schema's content. */
    public var contentHash: String?
    /** The Schema's Creation Date */
    public var createdAt: Date
    /** The schema's ID. */
    public var id: String
    /** The schema name  This is set by the user and is for them to easily recognise their schema */
    public var name: String
    /** Last Time Schema was Updated */
    public var updatedAt: Date

    public init(blobName: String, blobUrl: String, contentHash: String? = nil, createdAt: Date, id: String, name: String, updatedAt: Date) {
        self.blobName = blobName
        self.blobUrl = blobUrl
        self.contentHash = contentHash
        self.createdAt = createdAt
        self.id = id
        self.name = name
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case blobName = "blob_name"
        case blobUrl = "blob_url"
        case contentHash = "content_hash"
        case createdAt = "created_at"
        case id
        case name
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(blobName, forKey: .blobName)
        try container.encode(blobUrl, forKey: .blobUrl)
        try container.encodeIfPresent(contentHash, forKey: .contentHash)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

