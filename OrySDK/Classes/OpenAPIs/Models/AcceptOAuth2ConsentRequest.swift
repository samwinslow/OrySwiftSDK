//
// AcceptOAuth2ConsentRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AcceptOAuth2ConsentRequest: Codable, JSONEncodable, Hashable {

    public var grantAccessTokenAudience: [String]?
    public var grantScope: [String]?
    public var handledAt: Date?
    /** Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same client asks the same user for the same, or a subset of, scope. */
    public var remember: Bool?
    /** RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the authorization will be remembered indefinitely. */
    public var rememberFor: Int64?
    public var session: AcceptOAuth2ConsentRequestSession?

    public init(grantAccessTokenAudience: [String]? = nil, grantScope: [String]? = nil, handledAt: Date? = nil, remember: Bool? = nil, rememberFor: Int64? = nil, session: AcceptOAuth2ConsentRequestSession? = nil) {
        self.grantAccessTokenAudience = grantAccessTokenAudience
        self.grantScope = grantScope
        self.handledAt = handledAt
        self.remember = remember
        self.rememberFor = rememberFor
        self.session = session
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case grantAccessTokenAudience = "grant_access_token_audience"
        case grantScope = "grant_scope"
        case handledAt = "handled_at"
        case remember
        case rememberFor = "remember_for"
        case session
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(grantAccessTokenAudience, forKey: .grantAccessTokenAudience)
        try container.encodeIfPresent(grantScope, forKey: .grantScope)
        try container.encodeIfPresent(handledAt, forKey: .handledAt)
        try container.encodeIfPresent(remember, forKey: .remember)
        try container.encodeIfPresent(rememberFor, forKey: .rememberFor)
        try container.encodeIfPresent(session, forKey: .session)
    }
}

