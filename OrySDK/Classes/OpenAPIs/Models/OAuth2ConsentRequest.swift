//
// OAuth2ConsentRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OAuth2ConsentRequest: Codable, JSONEncodable, Hashable {

    /** ACR represents the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it to express that, for example, a user authenticated using two factor authentication. */
    public var acr: String?
    public var amr: [String]?
    /** ID is the identifier (\"authorization challenge\") of the consent authorization request. It is used to identify the session. */
    public var challenge: String
    public var client: OAuth2Client?
    public var context: AnyCodable?
    /** LoginChallenge is the login challenge this consent challenge belongs to. It can be used to associate a login and consent request in the login & consent app. */
    public var loginChallenge: String?
    /** LoginSessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag) this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false) this will be a new random value. This value is used as the \"sid\" parameter in the ID Token and in OIDC Front-/Back- channel logout. It's value can generally be used to associate consecutive login requests by a certain user. */
    public var loginSessionId: String?
    public var oidcContext: OAuth2ConsentRequestOpenIDConnectContext?
    /** RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters. */
    public var requestUrl: String?
    public var requestedAccessTokenAudience: [String]?
    public var requestedScope: [String]?
    /** Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you must not ask the user to grant the requested scopes. You must however either allow or deny the consent request using the usual API call. */
    public var skip: Bool?
    /** Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client. */
    public var subject: String?

    public init(acr: String? = nil, amr: [String]? = nil, challenge: String, client: OAuth2Client? = nil, context: AnyCodable? = nil, loginChallenge: String? = nil, loginSessionId: String? = nil, oidcContext: OAuth2ConsentRequestOpenIDConnectContext? = nil, requestUrl: String? = nil, requestedAccessTokenAudience: [String]? = nil, requestedScope: [String]? = nil, skip: Bool? = nil, subject: String? = nil) {
        self.acr = acr
        self.amr = amr
        self.challenge = challenge
        self.client = client
        self.context = context
        self.loginChallenge = loginChallenge
        self.loginSessionId = loginSessionId
        self.oidcContext = oidcContext
        self.requestUrl = requestUrl
        self.requestedAccessTokenAudience = requestedAccessTokenAudience
        self.requestedScope = requestedScope
        self.skip = skip
        self.subject = subject
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case acr
        case amr
        case challenge
        case client
        case context
        case loginChallenge = "login_challenge"
        case loginSessionId = "login_session_id"
        case oidcContext = "oidc_context"
        case requestUrl = "request_url"
        case requestedAccessTokenAudience = "requested_access_token_audience"
        case requestedScope = "requested_scope"
        case skip
        case subject
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(acr, forKey: .acr)
        try container.encodeIfPresent(amr, forKey: .amr)
        try container.encode(challenge, forKey: .challenge)
        try container.encodeIfPresent(client, forKey: .client)
        try container.encodeIfPresent(context, forKey: .context)
        try container.encodeIfPresent(loginChallenge, forKey: .loginChallenge)
        try container.encodeIfPresent(loginSessionId, forKey: .loginSessionId)
        try container.encodeIfPresent(oidcContext, forKey: .oidcContext)
        try container.encodeIfPresent(requestUrl, forKey: .requestUrl)
        try container.encodeIfPresent(requestedAccessTokenAudience, forKey: .requestedAccessTokenAudience)
        try container.encodeIfPresent(requestedScope, forKey: .requestedScope)
        try container.encodeIfPresent(skip, forKey: .skip)
        try container.encodeIfPresent(subject, forKey: .subject)
    }
}

