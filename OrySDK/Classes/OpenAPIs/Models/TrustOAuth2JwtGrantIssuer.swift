//
// TrustOAuth2JwtGrantIssuer.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Trust OAuth2 JWT Bearer Grant Type Issuer Request Body */
public struct TrustOAuth2JwtGrantIssuer: Codable, JSONEncodable, Hashable {

    /** The \"allow_any_subject\" indicates that the issuer is allowed to have any principal as the subject of the JWT. */
    public var allowAnySubject: Bool?
    /** The \"expires_at\" indicates, when grant will expire, so we will reject assertion from \"issuer\" targeting \"subject\". */
    public var expiresAt: Date
    /** The \"issuer\" identifies the principal that issued the JWT assertion (same as \"iss\" claim in JWT). */
    public var issuer: String
    public var jwk: JsonWebKey
    /** The \"scope\" contains list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) */
    public var scope: [String]
    /** The \"subject\" identifies the principal that is the subject of the JWT. */
    public var subject: String?

    public init(allowAnySubject: Bool? = nil, expiresAt: Date, issuer: String, jwk: JsonWebKey, scope: [String], subject: String? = nil) {
        self.allowAnySubject = allowAnySubject
        self.expiresAt = expiresAt
        self.issuer = issuer
        self.jwk = jwk
        self.scope = scope
        self.subject = subject
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case allowAnySubject = "allow_any_subject"
        case expiresAt = "expires_at"
        case issuer
        case jwk
        case scope
        case subject
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(allowAnySubject, forKey: .allowAnySubject)
        try container.encode(expiresAt, forKey: .expiresAt)
        try container.encode(issuer, forKey: .issuer)
        try container.encode(jwk, forKey: .jwk)
        try container.encode(scope, forKey: .scope)
        try container.encodeIfPresent(subject, forKey: .subject)
    }
}

