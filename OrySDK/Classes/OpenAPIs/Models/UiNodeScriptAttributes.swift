//
// UiNodeScriptAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UiNodeScriptAttributes: Codable, JSONEncodable, Hashable {

    /** The script async type */
    public var async: Bool
    /** The script cross origin policy */
    public var crossorigin: String
    /** A unique identifier */
    public var id: String
    /** The script's integrity hash */
    public var integrity: String
    /** NodeType represents this node's types. It is a mirror of `node.type` and is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is \"script\". */
    public var nodeType: String
    /** Nonce for CSP  A nonce you may want to use to improve your Content Security Policy. You do not have to use this value but if you want to improve your CSP policies you may use it. You can also choose to use your own nonce value! */
    public var nonce: String
    /** The script referrer policy */
    public var referrerpolicy: String
    /** The script source */
    public var src: String
    /** The script MIME type */
    public var type: String

    public init(async: Bool, crossorigin: String, id: String, integrity: String, nodeType: String, nonce: String, referrerpolicy: String, src: String, type: String) {
        self.async = async
        self.crossorigin = crossorigin
        self.id = id
        self.integrity = integrity
        self.nodeType = nodeType
        self.nonce = nonce
        self.referrerpolicy = referrerpolicy
        self.src = src
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case async
        case crossorigin
        case id
        case integrity
        case nodeType = "node_type"
        case nonce
        case referrerpolicy
        case src
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(async, forKey: .async)
        try container.encode(crossorigin, forKey: .crossorigin)
        try container.encode(id, forKey: .id)
        try container.encode(integrity, forKey: .integrity)
        try container.encode(nodeType, forKey: .nodeType)
        try container.encode(nonce, forKey: .nonce)
        try container.encode(referrerpolicy, forKey: .referrerpolicy)
        try container.encode(src, forKey: .src)
        try container.encode(type, forKey: .type)
    }
}

