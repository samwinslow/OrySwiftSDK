//
// CreateCustomDomainBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Create Custom Hostname Request Body */
public struct CreateCustomDomainBody: Codable, JSONEncodable, Hashable {

    /** The domain where cookies will be set. Has to be a parent domain of the custom hostname to work. */
    public var cookieDomain: String?
    /** CORS Allowed origins for the custom hostname. */
    public var corsAllowedOrigins: [String]?
    /** CORS Enabled for the custom hostname. */
    public var corsEnabled: Bool?
    /** The base URL where the custom user interface will be exposed. */
    public var customUiBaseUrl: String?
    /** The custom hostname where the API will be exposed. */
    public var hostname: String?

    public init(cookieDomain: String? = nil, corsAllowedOrigins: [String]? = nil, corsEnabled: Bool? = nil, customUiBaseUrl: String? = nil, hostname: String? = nil) {
        self.cookieDomain = cookieDomain
        self.corsAllowedOrigins = corsAllowedOrigins
        self.corsEnabled = corsEnabled
        self.customUiBaseUrl = customUiBaseUrl
        self.hostname = hostname
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cookieDomain = "cookie_domain"
        case corsAllowedOrigins = "cors_allowed_origins"
        case corsEnabled = "cors_enabled"
        case customUiBaseUrl = "custom_ui_base_url"
        case hostname
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(cookieDomain, forKey: .cookieDomain)
        try container.encodeIfPresent(corsAllowedOrigins, forKey: .corsAllowedOrigins)
        try container.encodeIfPresent(corsEnabled, forKey: .corsEnabled)
        try container.encodeIfPresent(customUiBaseUrl, forKey: .customUiBaseUrl)
        try container.encodeIfPresent(hostname, forKey: .hostname)
    }
}

