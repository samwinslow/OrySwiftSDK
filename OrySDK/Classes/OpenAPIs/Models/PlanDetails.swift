//
// PlanDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PlanDetails: Codable, JSONEncodable, Hashable {

    /** BaseFeeMonthly is the monthly base fee for the plan. */
    public var baseFeeMonthly: Int64
    /** BaseFeeYearly is the yearly base fee for the plan. */
    public var baseFeeYearly: Int64
    /** Custom is true if the plan is custom. This means it will be hidden from the pricing page. */
    public var custom: Bool
    /** Description is the description of the plan. */
    public var description: String
    /** Features are the feature definitions included in the plan. */
    public var features: [String: GenericUsage]
    /** Name is the name of the plan. */
    public var name: String
    /** Version is the version of the plan. The combination of `name@version` must be unique. */
    public var version: Int64

    public init(baseFeeMonthly: Int64, baseFeeYearly: Int64, custom: Bool, description: String, features: [String: GenericUsage], name: String, version: Int64) {
        self.baseFeeMonthly = baseFeeMonthly
        self.baseFeeYearly = baseFeeYearly
        self.custom = custom
        self.description = description
        self.features = features
        self.name = name
        self.version = version
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case baseFeeMonthly = "base_fee_monthly"
        case baseFeeYearly = "base_fee_yearly"
        case custom
        case description
        case features
        case name
        case version
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(baseFeeMonthly, forKey: .baseFeeMonthly)
        try container.encode(baseFeeYearly, forKey: .baseFeeYearly)
        try container.encode(custom, forKey: .custom)
        try container.encode(description, forKey: .description)
        try container.encode(features, forKey: .features)
        try container.encode(name, forKey: .name)
        try container.encode(version, forKey: .version)
    }
}

