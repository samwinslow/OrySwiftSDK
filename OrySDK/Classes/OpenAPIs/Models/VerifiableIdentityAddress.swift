//
// VerifiableIdentityAddress.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** VerifiableAddress is an identity&#39;s verifiable address */
public struct VerifiableIdentityAddress: Codable, JSONEncodable, Hashable {

    /** When this entry was created */
    public var createdAt: Date?
    /** The ID */
    public var id: String?
    /** VerifiableAddressStatus must not exceed 16 characters as that is the limitation in the SQL Schema */
    public var status: String
    /** When this entry was last updated */
    public var updatedAt: Date?
    /** The address value  example foo@user.com */
    public var value: String
    /** Indicates if the address has already been verified */
    public var verified: Bool
    public var verifiedAt: Date?
    /** VerifiableAddressType must not exceed 16 characters as that is the limitation in the SQL Schema */
    public var via: String

    public init(createdAt: Date? = nil, id: String? = nil, status: String, updatedAt: Date? = nil, value: String, verified: Bool, verifiedAt: Date? = nil, via: String) {
        self.createdAt = createdAt
        self.id = id
        self.status = status
        self.updatedAt = updatedAt
        self.value = value
        self.verified = verified
        self.verifiedAt = verifiedAt
        self.via = via
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt = "created_at"
        case id
        case status
        case updatedAt = "updated_at"
        case value
        case verified
        case verifiedAt = "verified_at"
        case via
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encode(value, forKey: .value)
        try container.encode(verified, forKey: .verified)
        try container.encodeIfPresent(verifiedAt, forKey: .verifiedAt)
        try container.encode(via, forKey: .via)
    }
}

