//
// JsonWebKey.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct JsonWebKey: Codable, JSONEncodable, Hashable {

    /** The \"alg\" (algorithm) parameter identifies the algorithm intended for use with the key.  The values used should either be registered in the IANA \"JSON Web Signature and Encryption Algorithms\" registry established by [JWA] or be a value that contains a Collision- Resistant Name. */
    public var alg: String
    public var crv: String?
    public var d: String?
    public var dp: String?
    public var dq: String?
    public var e: String?
    public var k: String?
    /** The \"kid\" (key ID) parameter is used to match a specific key.  This is used, for instance, to choose among a set of keys within a JWK Set during key rollover.  The structure of the \"kid\" value is unspecified.  When \"kid\" values are used within a JWK Set, different keys within the JWK Set SHOULD use distinct \"kid\" values.  (One example in which different keys might use the same \"kid\" value is if they have different \"kty\" (key type) values but are considered to be equivalent alternatives by the application using them.)  The \"kid\" value is a case-sensitive string. */
    public var kid: String
    /** The \"kty\" (key type) parameter identifies the cryptographic algorithm family used with the key, such as \"RSA\" or \"EC\". \"kty\" values should either be registered in the IANA \"JSON Web Key Types\" registry established by [JWA] or be a value that contains a Collision- Resistant Name.  The \"kty\" value is a case-sensitive string. */
    public var kty: String
    public var n: String?
    public var p: String?
    public var q: String?
    public var qi: String?
    /** Use (\"public key use\") identifies the intended use of the public key. The \"use\" parameter is employed to indicate whether a public key is used for encrypting data or verifying the signature on data. Values are commonly \"sig\" (signature) or \"enc\" (encryption). */
    public var use: String
    public var x: String?
    /** The \"x5c\" (X.509 certificate chain) parameter contains a chain of one or more PKIX certificates [RFC5280].  The certificate chain is represented as a JSON array of certificate value strings.  Each string in the array is a base64-encoded (Section 4 of [RFC4648] -- not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value. The PKIX certificate containing the key value MUST be the first certificate. */
    public var x5c: [String]?
    public var y: String?

    public init(alg: String, crv: String? = nil, d: String? = nil, dp: String? = nil, dq: String? = nil, e: String? = nil, k: String? = nil, kid: String, kty: String, n: String? = nil, p: String? = nil, q: String? = nil, qi: String? = nil, use: String, x: String? = nil, x5c: [String]? = nil, y: String? = nil) {
        self.alg = alg
        self.crv = crv
        self.d = d
        self.dp = dp
        self.dq = dq
        self.e = e
        self.k = k
        self.kid = kid
        self.kty = kty
        self.n = n
        self.p = p
        self.q = q
        self.qi = qi
        self.use = use
        self.x = x
        self.x5c = x5c
        self.y = y
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case alg
        case crv
        case d
        case dp
        case dq
        case e
        case k
        case kid
        case kty
        case n
        case p
        case q
        case qi
        case use
        case x
        case x5c
        case y
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(alg, forKey: .alg)
        try container.encodeIfPresent(crv, forKey: .crv)
        try container.encodeIfPresent(d, forKey: .d)
        try container.encodeIfPresent(dp, forKey: .dp)
        try container.encodeIfPresent(dq, forKey: .dq)
        try container.encodeIfPresent(e, forKey: .e)
        try container.encodeIfPresent(k, forKey: .k)
        try container.encode(kid, forKey: .kid)
        try container.encode(kty, forKey: .kty)
        try container.encodeIfPresent(n, forKey: .n)
        try container.encodeIfPresent(p, forKey: .p)
        try container.encodeIfPresent(q, forKey: .q)
        try container.encodeIfPresent(qi, forKey: .qi)
        try container.encode(use, forKey: .use)
        try container.encodeIfPresent(x, forKey: .x)
        try container.encodeIfPresent(x5c, forKey: .x5c)
        try container.encodeIfPresent(y, forKey: .y)
    }
}

