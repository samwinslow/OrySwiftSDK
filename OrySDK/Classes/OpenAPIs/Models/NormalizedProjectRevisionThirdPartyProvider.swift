//
// NormalizedProjectRevisionThirdPartyProvider.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NormalizedProjectRevisionThirdPartyProvider: Codable, JSONEncodable, Hashable {

    public var applePrivateKey: String?
    /** Apple Private Key Identifier  Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret */
    public var applePrivateKeyId: String?
    /** Apple Developer Team ID  Apple Developer Team ID needed for generating a JWT token for client secret */
    public var appleTeamId: String?
    /** AuthURL is the authorize url, typically something like: https://example.org/oauth2/auth Should only be used when the OAuth2 / OpenID Connect server is not supporting OpenID Connect Discovery and when `provider` is set to `generic`. */
    public var authUrl: String?
    /** Tenant is the Azure AD Tenant to use for authentication, and must be set when `provider` is set to `microsoft`.  Can be either `common`, `organizations`, `consumers` for a multitenant application or a specific tenant like `8eaef023-2b34-4da1-9baa-8bc8c9d6a490` or `contoso.onmicrosoft.com`. */
    public var azureTenant: String?
    /** ClientID is the application's Client ID. */
    public var clientId: String?
    public var clientSecret: String?
    /** The Project's Revision Creation Date */
    public var createdAt: Date?
    public var id: String?
    /** IssuerURL is the OpenID Connect Server URL. You can leave this empty if `provider` is not set to `generic`. If set, neither `auth_url` nor `token_url` are required. */
    public var issuerUrl: String?
    /** Label represents an optional label which can be used in the UI generation. */
    public var label: String?
    /** Mapper specifies the JSONNet code snippet which uses the OpenID Connect Provider's data (e.g. GitHub or Google profile information) to hydrate the identity's data.  It can be either a URL (file://, http(s)://, base64://) or an inline JSONNet code snippet. */
    public var mapperUrl: String?
    /** The Revision's ID this schema belongs to */
    public var projectRevisionId: String?
    /** Provider is either \"generic\" for a generic OAuth 2.0 / OpenID Connect Provider or one of: generic google github gitlab microsoft discord slack facebook vk yandex apple */
    public var provider: String?
    /** ID is the provider's ID */
    public var providerId: String?
    public var requestedClaims: AnyCodable?
    public var scope: [String]?
    public var subjectSource: String?
    /** TokenURL is the token url, typically something like: https://example.org/oauth2/token  Should only be used when the OAuth2 / OpenID Connect server is not supporting OpenID Connect Discovery and when `provider` is set to `generic`. */
    public var tokenUrl: String?
    /** Last Time Project's Revision was Updated */
    public var updatedAt: Date?

    public init(applePrivateKey: String? = nil, applePrivateKeyId: String? = nil, appleTeamId: String? = nil, authUrl: String? = nil, azureTenant: String? = nil, clientId: String? = nil, clientSecret: String? = nil, createdAt: Date? = nil, id: String? = nil, issuerUrl: String? = nil, label: String? = nil, mapperUrl: String? = nil, projectRevisionId: String? = nil, provider: String? = nil, providerId: String? = nil, requestedClaims: AnyCodable? = nil, scope: [String]? = nil, subjectSource: String? = nil, tokenUrl: String? = nil, updatedAt: Date? = nil) {
        self.applePrivateKey = applePrivateKey
        self.applePrivateKeyId = applePrivateKeyId
        self.appleTeamId = appleTeamId
        self.authUrl = authUrl
        self.azureTenant = azureTenant
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.createdAt = createdAt
        self.id = id
        self.issuerUrl = issuerUrl
        self.label = label
        self.mapperUrl = mapperUrl
        self.projectRevisionId = projectRevisionId
        self.provider = provider
        self.providerId = providerId
        self.requestedClaims = requestedClaims
        self.scope = scope
        self.subjectSource = subjectSource
        self.tokenUrl = tokenUrl
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case applePrivateKey = "apple_private_key"
        case applePrivateKeyId = "apple_private_key_id"
        case appleTeamId = "apple_team_id"
        case authUrl = "auth_url"
        case azureTenant = "azure_tenant"
        case clientId = "client_id"
        case clientSecret = "client_secret"
        case createdAt = "created_at"
        case id
        case issuerUrl = "issuer_url"
        case label
        case mapperUrl = "mapper_url"
        case projectRevisionId = "project_revision_id"
        case provider
        case providerId = "provider_id"
        case requestedClaims = "requested_claims"
        case scope
        case subjectSource = "subject_source"
        case tokenUrl = "token_url"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(applePrivateKey, forKey: .applePrivateKey)
        try container.encodeIfPresent(applePrivateKeyId, forKey: .applePrivateKeyId)
        try container.encodeIfPresent(appleTeamId, forKey: .appleTeamId)
        try container.encodeIfPresent(authUrl, forKey: .authUrl)
        try container.encodeIfPresent(azureTenant, forKey: .azureTenant)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(clientSecret, forKey: .clientSecret)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(issuerUrl, forKey: .issuerUrl)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(mapperUrl, forKey: .mapperUrl)
        try container.encodeIfPresent(projectRevisionId, forKey: .projectRevisionId)
        try container.encodeIfPresent(provider, forKey: .provider)
        try container.encodeIfPresent(providerId, forKey: .providerId)
        try container.encodeIfPresent(requestedClaims, forKey: .requestedClaims)
        try container.encodeIfPresent(scope, forKey: .scope)
        try container.encodeIfPresent(subjectSource, forKey: .subjectSource)
        try container.encodeIfPresent(tokenUrl, forKey: .tokenUrl)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

