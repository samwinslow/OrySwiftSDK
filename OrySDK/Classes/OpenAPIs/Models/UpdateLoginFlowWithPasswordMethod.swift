//
// UpdateLoginFlowWithPasswordMethod.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Update Login Flow with Password Method */
public struct UpdateLoginFlowWithPasswordMethod: Codable, JSONEncodable, Hashable {

    /** Sending the anti-csrf token is only required for browser login flows. */
    public var csrfToken: String?
    /** Identifier is the email or username of the user trying to log in. */
    public var identifier: String
    /** Method should be set to \"password\" when logging in using the identifier and password strategy. */
    public var method: String
    /** The user's password. */
    public var password: String
    /** Identifier is the email or username of the user trying to log in. This field is deprecated! */
    public var passwordIdentifier: String?

    public init(csrfToken: String? = nil, identifier: String, method: String, password: String, passwordIdentifier: String? = nil) {
        self.csrfToken = csrfToken
        self.identifier = identifier
        self.method = method
        self.password = password
        self.passwordIdentifier = passwordIdentifier
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case csrfToken = "csrf_token"
        case identifier
        case method
        case password
        case passwordIdentifier = "password_identifier"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(csrfToken, forKey: .csrfToken)
        try container.encode(identifier, forKey: .identifier)
        try container.encode(method, forKey: .method)
        try container.encode(password, forKey: .password)
        try container.encodeIfPresent(passwordIdentifier, forKey: .passwordIdentifier)
    }
}

