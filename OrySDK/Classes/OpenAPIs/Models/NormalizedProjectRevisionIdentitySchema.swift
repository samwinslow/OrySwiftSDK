//
// NormalizedProjectRevisionIdentitySchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NormalizedProjectRevisionIdentitySchema: Codable, JSONEncodable, Hashable {

    /** The Project's Revision Creation Date */
    public var createdAt: Date?
    /** The unique ID of this entry. */
    public var id: String?
    public var identitySchema: ManagedIdentitySchema?
    public var identitySchemaId: String?
    /** The imported (named) ID of the Identity Schema referenced in the Ory Kratos config. */
    public var importId: String?
    /** The ImportURL can be used to import an Identity Schema from a bse64 encoded string. In the future, this key also support HTTPS and other sources!  If you import an Ory Kratos configuration, this would be akin to the `identity.schemas.#.url` key.  The configuration will always return the import URL when you fetch it from the API. */
    public var importUrl: String?
    /** If true sets the default schema for identities  Only one schema can ever be the default schema. If you try to add two schemas with default to true, the request will fail. */
    public var isDefault: Bool?
    /** Use a preset instead of a custom identity schema. */
    public var preset: String?
    /** The Revision's ID this schema belongs to */
    public var projectRevisionId: String?
    /** Last Time Project's Revision was Updated */
    public var updatedAt: Date?

    public init(createdAt: Date? = nil, id: String? = nil, identitySchema: ManagedIdentitySchema? = nil, identitySchemaId: String? = nil, importId: String? = nil, importUrl: String? = nil, isDefault: Bool? = nil, preset: String? = nil, projectRevisionId: String? = nil, updatedAt: Date? = nil) {
        self.createdAt = createdAt
        self.id = id
        self.identitySchema = identitySchema
        self.identitySchemaId = identitySchemaId
        self.importId = importId
        self.importUrl = importUrl
        self.isDefault = isDefault
        self.preset = preset
        self.projectRevisionId = projectRevisionId
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt = "created_at"
        case id
        case identitySchema = "identity_schema"
        case identitySchemaId = "identity_schema_id"
        case importId = "import_id"
        case importUrl = "import_url"
        case isDefault = "is_default"
        case preset
        case projectRevisionId = "project_revision_id"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(identitySchema, forKey: .identitySchema)
        try container.encodeIfPresent(identitySchemaId, forKey: .identitySchemaId)
        try container.encodeIfPresent(importId, forKey: .importId)
        try container.encodeIfPresent(importUrl, forKey: .importUrl)
        try container.encodeIfPresent(isDefault, forKey: .isDefault)
        try container.encodeIfPresent(preset, forKey: .preset)
        try container.encodeIfPresent(projectRevisionId, forKey: .projectRevisionId)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

