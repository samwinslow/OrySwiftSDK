//
// Relationship.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Relationship */
public struct Relationship: Codable, JSONEncodable, Hashable {

    /** Namespace of the Relation Tuple */
    public var namespace: String
    /** Object of the Relation Tuple */
    public var object: String
    /** Relation of the Relation Tuple */
    public var relation: String
    /** SubjectID of the Relation Tuple  Either SubjectSet or SubjectID can be provided. */
    public var subjectId: String?
    public var subjectSet: SubjectSet?

    public init(namespace: String, object: String, relation: String, subjectId: String? = nil, subjectSet: SubjectSet? = nil) {
        self.namespace = namespace
        self.object = object
        self.relation = relation
        self.subjectId = subjectId
        self.subjectSet = subjectSet
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case namespace
        case object
        case relation
        case subjectId = "subject_id"
        case subjectSet = "subject_set"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(namespace, forKey: .namespace)
        try container.encode(object, forKey: .object)
        try container.encode(relation, forKey: .relation)
        try container.encodeIfPresent(subjectId, forKey: .subjectId)
        try container.encodeIfPresent(subjectSet, forKey: .subjectSet)
    }
}

