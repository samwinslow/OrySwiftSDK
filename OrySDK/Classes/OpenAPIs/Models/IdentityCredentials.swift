//
// IdentityCredentials.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Credentials represents a specific credential type */
public struct IdentityCredentials: Codable, JSONEncodable, Hashable {

    public var config: AnyCodable?
    /** CreatedAt is a helper struct field for gobuffalo.pop. */
    public var createdAt: Date?
    /** Identifiers represents a list of unique identifiers this credential type matches. */
    public var identifiers: [String]?
    public var type: IdentityCredentialsType?
    /** UpdatedAt is a helper struct field for gobuffalo.pop. */
    public var updatedAt: Date?
    /** Version refers to the version of the credential. Useful when changing the config schema. */
    public var version: Int64?

    public init(config: AnyCodable? = nil, createdAt: Date? = nil, identifiers: [String]? = nil, type: IdentityCredentialsType? = nil, updatedAt: Date? = nil, version: Int64? = nil) {
        self.config = config
        self.createdAt = createdAt
        self.identifiers = identifiers
        self.type = type
        self.updatedAt = updatedAt
        self.version = version
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case config
        case createdAt = "created_at"
        case identifiers
        case type
        case updatedAt = "updated_at"
        case version
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(config, forKey: .config)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(identifiers, forKey: .identifiers)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(version, forKey: .version)
    }
}

