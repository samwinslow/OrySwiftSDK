//
// JsonPatch.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** JSON Patch allows you to target individual keys in a JSON document for updates.  For more examples see: https://jsonpatch.com */
public struct JsonPatch: Codable, JSONEncodable, Hashable {

    public enum Op: String, Codable, CaseIterable {
        case add = "add"
        case remove = "remove"
        case replace = "replace"
        case move = "move"
        case copy = "copy"
        case test = "test"
    }
    /** This field is used together with operation \"move\" and uses JSON Pointer notation.  Learn more [about JSON Pointers](https://datatracker.ietf.org/doc/html/rfc6901#section-5). */
    public var from: String?
    /** The JSON Patch operation */
    public var op: Op
    /** The JSON Pointer to the target key */
    public var path: String
    /** The value to be used. Only available for `add` and `replace` operations. */
    public var value: AnyCodable?

    public init(from: String? = nil, op: Op, path: String, value: AnyCodable? = nil) {
        self.from = from
        self.op = op
        self.path = path
        self.value = value
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case from
        case op
        case path
        case value
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encode(op, forKey: .op)
        try container.encode(path, forKey: .path)
        try container.encodeIfPresent(value, forKey: .value)
    }
}

