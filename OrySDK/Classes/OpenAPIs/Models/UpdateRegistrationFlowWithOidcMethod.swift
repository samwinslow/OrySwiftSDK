//
// UpdateRegistrationFlowWithOidcMethod.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Update Registration Flow with OpenID Connect Method */
public struct UpdateRegistrationFlowWithOidcMethod: Codable, JSONEncodable, Hashable {

    /** The CSRF Token */
    public var csrfToken: String?
    /** Method to use  This field must be set to `oidc` when using the oidc method. */
    public var method: String
    /** The provider to register with */
    public var provider: String
    /** The identity traits */
    public var traits: AnyCodable?
    /** Transient data to pass along to any webhooks */
    public var transientPayload: AnyCodable?
    /** UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`. */
    public var upstreamParameters: AnyCodable?

    public init(csrfToken: String? = nil, method: String, provider: String, traits: AnyCodable? = nil, transientPayload: AnyCodable? = nil, upstreamParameters: AnyCodable? = nil) {
        self.csrfToken = csrfToken
        self.method = method
        self.provider = provider
        self.traits = traits
        self.transientPayload = transientPayload
        self.upstreamParameters = upstreamParameters
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case csrfToken = "csrf_token"
        case method
        case provider
        case traits
        case transientPayload = "transient_payload"
        case upstreamParameters = "upstream_parameters"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(csrfToken, forKey: .csrfToken)
        try container.encode(method, forKey: .method)
        try container.encode(provider, forKey: .provider)
        try container.encodeIfPresent(traits, forKey: .traits)
        try container.encodeIfPresent(transientPayload, forKey: .transientPayload)
        try container.encodeIfPresent(upstreamParameters, forKey: .upstreamParameters)
    }
}

