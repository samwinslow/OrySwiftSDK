//
// UpdateSettingsFlowWithWebAuthnMethod.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Update Settings Flow with WebAuthn Method */
public struct UpdateSettingsFlowWithWebAuthnMethod: Codable, JSONEncodable, Hashable {

    /** CSRFToken is the anti-CSRF token */
    public var csrfToken: String?
    /** Method  Should be set to \"webauthn\" when trying to add, update, or remove a webAuthn pairing. */
    public var method: String
    /** Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here. */
    public var webauthnRegister: String?
    /** Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added. */
    public var webauthnRegisterDisplayname: String?
    /** Remove a WebAuthn Security Key  This must contain the ID of the WebAuthN connection. */
    public var webauthnRemove: String?

    public init(csrfToken: String? = nil, method: String, webauthnRegister: String? = nil, webauthnRegisterDisplayname: String? = nil, webauthnRemove: String? = nil) {
        self.csrfToken = csrfToken
        self.method = method
        self.webauthnRegister = webauthnRegister
        self.webauthnRegisterDisplayname = webauthnRegisterDisplayname
        self.webauthnRemove = webauthnRemove
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case csrfToken = "csrf_token"
        case method
        case webauthnRegister = "webauthn_register"
        case webauthnRegisterDisplayname = "webauthn_register_displayname"
        case webauthnRemove = "webauthn_remove"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(csrfToken, forKey: .csrfToken)
        try container.encode(method, forKey: .method)
        try container.encodeIfPresent(webauthnRegister, forKey: .webauthnRegister)
        try container.encodeIfPresent(webauthnRegisterDisplayname, forKey: .webauthnRegisterDisplayname)
        try container.encodeIfPresent(webauthnRemove, forKey: .webauthnRemove)
    }
}

