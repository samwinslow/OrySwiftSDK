//
// ProjectAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ProjectAPI {

    /**
     Create a Project
     
     - parameter createProjectBody: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createProject(createProjectBody: CreateProjectBody? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: Project?, _ error: Error?) -> Void)) -> RequestTask {
        return createProjectWithRequestBuilder(createProjectBody: createProjectBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a Project
     - POST /projects
     - Creates a new project.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter createProjectBody: (body)  (optional)
     - returns: RequestBuilder<Project> 
     */
    open class func createProjectWithRequestBuilder(createProjectBody: CreateProjectBody? = nil) -> RequestBuilder<Project> {
        let localVariablePath = "/projects"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createProjectBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Project>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create project API token
     
     - parameter project: (path) The Project ID or Project slug 
     - parameter createProjectApiKeyRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createProjectApiKey(project: String, createProjectApiKeyRequest: CreateProjectApiKeyRequest? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: ProjectApiKey?, _ error: Error?) -> Void)) -> RequestTask {
        return createProjectApiKeyWithRequestBuilder(project: project, createProjectApiKeyRequest: createProjectApiKeyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create project API token
     - POST /projects/{project}/tokens
     - Create an API token for a project.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter project: (path) The Project ID or Project slug 
     - parameter createProjectApiKeyRequest: (body)  (optional)
     - returns: RequestBuilder<ProjectApiKey> 
     */
    open class func createProjectApiKeyWithRequestBuilder(project: String, createProjectApiKeyRequest: CreateProjectApiKeyRequest? = nil) -> RequestBuilder<ProjectApiKey> {
        var localVariablePath = "/projects/{project}/tokens"
        let projectPreEscape = "\(APIHelper.mapValueToPathItem(project))"
        let projectPostEscape = projectPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project}", with: projectPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createProjectApiKeyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProjectApiKey>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete project API token
     
     - parameter project: (path) The Project ID or Project slug 
     - parameter tokenId: (path) The Token ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteProjectApiKey(project: String, tokenId: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteProjectApiKeyWithRequestBuilder(project: project, tokenId: tokenId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete project API token
     - DELETE /projects/{project}/tokens/{token_id}
     - Deletes an API token and immediately removes it.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter project: (path) The Project ID or Project slug 
     - parameter tokenId: (path) The Token ID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteProjectApiKeyWithRequestBuilder(project: String, tokenId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/projects/{project}/tokens/{token_id}"
        let projectPreEscape = "\(APIHelper.mapValueToPathItem(project))"
        let projectPostEscape = projectPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project}", with: projectPostEscape, options: .literal, range: nil)
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{token_id}", with: tokenIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Returns the Ory Network Project selected in the Ory Network Console
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getActiveProjectInConsole(apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: ActiveProjectInConsole?, _ error: Error?) -> Void)) -> RequestTask {
        return getActiveProjectInConsoleWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Returns the Ory Network Project selected in the Ory Network Console
     - GET /console/active/project
     - Use this API to get your active project in the Ory Network Console UI.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - returns: RequestBuilder<ActiveProjectInConsole> 
     */
    open class func getActiveProjectInConsoleWithRequestBuilder() -> RequestBuilder<ActiveProjectInConsole> {
        let localVariablePath = "/console/active/project"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ActiveProjectInConsole>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a Project
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getProject(projectId: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: Project?, _ error: Error?) -> Void)) -> RequestTask {
        return getProjectWithRequestBuilder(projectId: projectId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a Project
     - GET /projects/{project_id}
     - Get a projects you have access to by its ID.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - returns: RequestBuilder<Project> 
     */
    open class func getProjectWithRequestBuilder(projectId: String) -> RequestBuilder<Project> {
        var localVariablePath = "/projects/{project_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Project>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all members associated with this project
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getProjectMembers(projectId: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: [CloudAccount]?, _ error: Error?) -> Void)) -> RequestTask {
        return getProjectMembersWithRequestBuilder(projectId: projectId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all members associated with this project
     - GET /projects/{project_id}/members
     - This endpoint requires the user to be a member of the project with the role `OWNER` or `DEVELOPER`.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - returns: RequestBuilder<[CloudAccount]> 
     */
    open class func getProjectMembersWithRequestBuilder(projectId: String) -> RequestBuilder<[CloudAccount]> {
        var localVariablePath = "/projects/{project_id}/members"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[CloudAccount]>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List a project's API Tokens
     
     - parameter project: (path) The Project ID or Project slug 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listProjectApiKeys(project: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: [ProjectApiKey]?, _ error: Error?) -> Void)) -> RequestTask {
        return listProjectApiKeysWithRequestBuilder(project: project).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List a project's API Tokens
     - GET /projects/{project}/tokens
     - A list of all the project's API tokens.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter project: (path) The Project ID or Project slug 
     - returns: RequestBuilder<[ProjectApiKey]> 
     */
    open class func listProjectApiKeysWithRequestBuilder(project: String) -> RequestBuilder<[ProjectApiKey]> {
        var localVariablePath = "/projects/{project}/tokens"
        let projectPreEscape = "\(APIHelper.mapValueToPathItem(project))"
        let projectPostEscape = projectPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project}", with: projectPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ProjectApiKey]>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List All Projects
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listProjects(apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: [ProjectMetadata]?, _ error: Error?) -> Void)) -> RequestTask {
        return listProjectsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All Projects
     - GET /projects
     - Lists all projects you have access to.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - returns: RequestBuilder<[ProjectMetadata]> 
     */
    open class func listProjectsWithRequestBuilder() -> RequestBuilder<[ProjectMetadata]> {
        let localVariablePath = "/projects"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ProjectMetadata]>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Patch an Ory Network Project Configuration
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter jsonPatch: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func patchProject(projectId: String, jsonPatch: [JsonPatch]? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: SuccessfulProjectUpdate?, _ error: Error?) -> Void)) -> RequestTask {
        return patchProjectWithRequestBuilder(projectId: projectId, jsonPatch: jsonPatch).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Patch an Ory Network Project Configuration
     - PATCH /projects/{project_id}
     - Deprecated: Use the `patchProjectWithRevision` endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory's services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter jsonPatch: (body)  (optional)
     - returns: RequestBuilder<SuccessfulProjectUpdate> 
     */
    open class func patchProjectWithRequestBuilder(projectId: String, jsonPatch: [JsonPatch]? = nil) -> RequestBuilder<SuccessfulProjectUpdate> {
        var localVariablePath = "/projects/{project_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: jsonPatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SuccessfulProjectUpdate>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Irrecoverably purge a project
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func purgeProject(projectId: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return purgeProjectWithRequestBuilder(projectId: projectId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Irrecoverably purge a project
     - DELETE /projects/{project_id}
     - !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - returns: RequestBuilder<Void> 
     */
    open class func purgeProjectWithRequestBuilder(projectId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/projects/{project_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Remove a member associated with this project
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter memberId: (path) Member ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removeProjectMember(projectId: String, memberId: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return removeProjectMemberWithRequestBuilder(projectId: projectId, memberId: memberId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove a member associated with this project
     - DELETE /projects/{project_id}/members/{member_id}
     - This also sets their invite status to `REMOVED`. This endpoint requires the user to be a member of the project with the role `OWNER`.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter memberId: (path) Member ID 
     - returns: RequestBuilder<Void> 
     */
    open class func removeProjectMemberWithRequestBuilder(projectId: String, memberId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/projects/{project_id}/members/{member_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(APIHelper.mapValueToPathItem(memberId))"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{member_id}", with: memberIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Sets the Ory Network Project active in the Ory Network Console
     
     - parameter setActiveProjectInConsoleBody: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setActiveProjectInConsole(setActiveProjectInConsoleBody: SetActiveProjectInConsoleBody? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return setActiveProjectInConsoleWithRequestBuilder(setActiveProjectInConsoleBody: setActiveProjectInConsoleBody).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Sets the Ory Network Project active in the Ory Network Console
     - PUT /console/active/project
     - Use this API to set your active project in the Ory Network Console UI.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter setActiveProjectInConsoleBody: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func setActiveProjectInConsoleWithRequestBuilder(setActiveProjectInConsoleBody: SetActiveProjectInConsoleBody? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/console/active/project"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setActiveProjectInConsoleBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update an Ory Network Project Configuration
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter setProject: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setProject(projectId: String, setProject: SetProject? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: SuccessfulProjectUpdate?, _ error: Error?) -> Void)) -> RequestTask {
        return setProjectWithRequestBuilder(projectId: projectId, setProject: setProject).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update an Ory Network Project Configuration
     - PUT /projects/{project_id}
     - This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service's configuration will completely override your current configuration for that service!
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter setProject: (body)  (optional)
     - returns: RequestBuilder<SuccessfulProjectUpdate> 
     */
    open class func setProjectWithRequestBuilder(projectId: String, setProject: SetProject? = nil) -> RequestBuilder<SuccessfulProjectUpdate> {
        var localVariablePath = "/projects/{project_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setProject)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SuccessfulProjectUpdate>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
