//
// ProjectAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ProjectAPI {

    /**
     Create a Project
     
     - parameter createProjectBody: (body)  (optional)
     - returns: Project
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createProject(createProjectBody: CreateProjectBody? = nil) async throws -> Project {
        return try await createProjectWithRequestBuilder(createProjectBody: createProjectBody).execute().body
    }

    /**
     Create a Project
     - POST /projects
     - Creates a new project.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter createProjectBody: (body)  (optional)
     - returns: RequestBuilder<Project> 
     */
    open class func createProjectWithRequestBuilder(createProjectBody: CreateProjectBody? = nil) -> RequestBuilder<Project> {
        let localVariablePath = "/projects"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createProjectBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Project>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create project API token
     
     - parameter project: (path) The Project ID or Project slug 
     - parameter createProjectApiKeyRequest: (body)  (optional)
     - returns: ProjectApiKey
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createProjectApiKey(project: String, createProjectApiKeyRequest: CreateProjectApiKeyRequest? = nil) async throws -> ProjectApiKey {
        return try await createProjectApiKeyWithRequestBuilder(project: project, createProjectApiKeyRequest: createProjectApiKeyRequest).execute().body
    }

    /**
     Create project API token
     - POST /projects/{project}/tokens
     - Create an API token for a project.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter project: (path) The Project ID or Project slug 
     - parameter createProjectApiKeyRequest: (body)  (optional)
     - returns: RequestBuilder<ProjectApiKey> 
     */
    open class func createProjectApiKeyWithRequestBuilder(project: String, createProjectApiKeyRequest: CreateProjectApiKeyRequest? = nil) -> RequestBuilder<ProjectApiKey> {
        var localVariablePath = "/projects/{project}/tokens"
        let projectPreEscape = "\(APIHelper.mapValueToPathItem(project))"
        let projectPostEscape = projectPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project}", with: projectPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createProjectApiKeyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProjectApiKey>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete project API token
     
     - parameter project: (path) The Project ID or Project slug 
     - parameter tokenId: (path) The Token ID 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteProjectApiKey(project: String, tokenId: String) async throws {
        return try await deleteProjectApiKeyWithRequestBuilder(project: project, tokenId: tokenId).execute().body
    }

    /**
     Delete project API token
     - DELETE /projects/{project}/tokens/{token_id}
     - Deletes an API token and immediately removes it.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter project: (path) The Project ID or Project slug 
     - parameter tokenId: (path) The Token ID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteProjectApiKeyWithRequestBuilder(project: String, tokenId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/projects/{project}/tokens/{token_id}"
        let projectPreEscape = "\(APIHelper.mapValueToPathItem(project))"
        let projectPostEscape = projectPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project}", with: projectPostEscape, options: .literal, range: nil)
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{token_id}", with: tokenIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Returns the Ory Network Project selected in the Ory Network Console
     
     - returns: ActiveProjectInConsole
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getActiveProjectInConsole() async throws -> ActiveProjectInConsole {
        return try await getActiveProjectInConsoleWithRequestBuilder().execute().body
    }

    /**
     Returns the Ory Network Project selected in the Ory Network Console
     - GET /console/active/project
     - Use this API to get your active project in the Ory Network Console UI.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - returns: RequestBuilder<ActiveProjectInConsole> 
     */
    open class func getActiveProjectInConsoleWithRequestBuilder() -> RequestBuilder<ActiveProjectInConsole> {
        let localVariablePath = "/console/active/project"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ActiveProjectInConsole>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a Project
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - returns: Project
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getProject(projectId: String) async throws -> Project {
        return try await getProjectWithRequestBuilder(projectId: projectId).execute().body
    }

    /**
     Get a Project
     - GET /projects/{project_id}
     - Get a projects you have access to by its ID.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - returns: RequestBuilder<Project> 
     */
    open class func getProjectWithRequestBuilder(projectId: String) -> RequestBuilder<Project> {
        var localVariablePath = "/projects/{project_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Project>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all members associated with this project
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - returns: [CloudAccount]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getProjectMembers(projectId: String) async throws -> [CloudAccount] {
        return try await getProjectMembersWithRequestBuilder(projectId: projectId).execute().body
    }

    /**
     Get all members associated with this project
     - GET /projects/{project_id}/members
     - This endpoint requires the user to be a member of the project with the role `OWNER` or `DEVELOPER`.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - returns: RequestBuilder<[CloudAccount]> 
     */
    open class func getProjectMembersWithRequestBuilder(projectId: String) -> RequestBuilder<[CloudAccount]> {
        var localVariablePath = "/projects/{project_id}/members"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[CloudAccount]>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List a project's API Tokens
     
     - parameter project: (path) The Project ID or Project slug 
     - returns: [ProjectApiKey]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listProjectApiKeys(project: String) async throws -> [ProjectApiKey] {
        return try await listProjectApiKeysWithRequestBuilder(project: project).execute().body
    }

    /**
     List a project's API Tokens
     - GET /projects/{project}/tokens
     - A list of all the project's API tokens.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter project: (path) The Project ID or Project slug 
     - returns: RequestBuilder<[ProjectApiKey]> 
     */
    open class func listProjectApiKeysWithRequestBuilder(project: String) -> RequestBuilder<[ProjectApiKey]> {
        var localVariablePath = "/projects/{project}/tokens"
        let projectPreEscape = "\(APIHelper.mapValueToPathItem(project))"
        let projectPostEscape = projectPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project}", with: projectPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ProjectApiKey]>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List All Projects
     
     - returns: [ProjectMetadata]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listProjects() async throws -> [ProjectMetadata] {
        return try await listProjectsWithRequestBuilder().execute().body
    }

    /**
     List All Projects
     - GET /projects
     - Lists all projects you have access to.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - returns: RequestBuilder<[ProjectMetadata]> 
     */
    open class func listProjectsWithRequestBuilder() -> RequestBuilder<[ProjectMetadata]> {
        let localVariablePath = "/projects"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ProjectMetadata]>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Patch an Ory Network Project Configuration
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter jsonPatch: (body)  (optional)
     - returns: SuccessfulProjectUpdate
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func patchProject(projectId: String, jsonPatch: [JsonPatch]? = nil) async throws -> SuccessfulProjectUpdate {
        return try await patchProjectWithRequestBuilder(projectId: projectId, jsonPatch: jsonPatch).execute().body
    }

    /**
     Patch an Ory Network Project Configuration
     - PATCH /projects/{project_id}
     - Deprecated: Use the `patchProjectWithRevision` endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory's services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter jsonPatch: (body)  (optional)
     - returns: RequestBuilder<SuccessfulProjectUpdate> 
     */
    open class func patchProjectWithRequestBuilder(projectId: String, jsonPatch: [JsonPatch]? = nil) -> RequestBuilder<SuccessfulProjectUpdate> {
        var localVariablePath = "/projects/{project_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: jsonPatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SuccessfulProjectUpdate>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Irrecoverably purge a project
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func purgeProject(projectId: String) async throws {
        return try await purgeProjectWithRequestBuilder(projectId: projectId).execute().body
    }

    /**
     Irrecoverably purge a project
     - DELETE /projects/{project_id}
     - !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - returns: RequestBuilder<Void> 
     */
    open class func purgeProjectWithRequestBuilder(projectId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/projects/{project_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Remove a member associated with this project
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter memberId: (path) Member ID 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func removeProjectMember(projectId: String, memberId: String) async throws {
        return try await removeProjectMemberWithRequestBuilder(projectId: projectId, memberId: memberId).execute().body
    }

    /**
     Remove a member associated with this project
     - DELETE /projects/{project_id}/members/{member_id}
     - This also sets their invite status to `REMOVED`. This endpoint requires the user to be a member of the project with the role `OWNER`.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter memberId: (path) Member ID 
     - returns: RequestBuilder<Void> 
     */
    open class func removeProjectMemberWithRequestBuilder(projectId: String, memberId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/projects/{project_id}/members/{member_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(APIHelper.mapValueToPathItem(memberId))"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{member_id}", with: memberIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Sets the Ory Network Project active in the Ory Network Console
     
     - parameter setActiveProjectInConsoleBody: (body)  (optional)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func setActiveProjectInConsole(setActiveProjectInConsoleBody: SetActiveProjectInConsoleBody? = nil) async throws {
        return try await setActiveProjectInConsoleWithRequestBuilder(setActiveProjectInConsoleBody: setActiveProjectInConsoleBody).execute().body
    }

    /**
     Sets the Ory Network Project active in the Ory Network Console
     - PUT /console/active/project
     - Use this API to set your active project in the Ory Network Console UI.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter setActiveProjectInConsoleBody: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func setActiveProjectInConsoleWithRequestBuilder(setActiveProjectInConsoleBody: SetActiveProjectInConsoleBody? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/console/active/project"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setActiveProjectInConsoleBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update an Ory Network Project Configuration
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter setProject: (body)  (optional)
     - returns: SuccessfulProjectUpdate
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func setProject(projectId: String, setProject: SetProject? = nil) async throws -> SuccessfulProjectUpdate {
        return try await setProjectWithRequestBuilder(projectId: projectId, setProject: setProject).execute().body
    }

    /**
     Update an Ory Network Project Configuration
     - PUT /projects/{project_id}
     - This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service's configuration will completely override your current configuration for that service!
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter setProject: (body)  (optional)
     - returns: RequestBuilder<SuccessfulProjectUpdate> 
     */
    open class func setProjectWithRequestBuilder(projectId: String, setProject: SetProject? = nil) -> RequestBuilder<SuccessfulProjectUpdate> {
        var localVariablePath = "/projects/{project_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setProject)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SuccessfulProjectUpdate>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
