//
// OAuth2API.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OAuth2API {

    /**
     Accept OAuth 2.0 Consent Request
     
     - parameter consentChallenge: (query) OAuth 2.0 Consent Request Challenge 
     - parameter acceptOAuth2ConsentRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func acceptOAuth2ConsentRequest(consentChallenge: String, acceptOAuth2ConsentRequest: AcceptOAuth2ConsentRequest? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2RedirectTo?, _ error: Error?) -> Void)) -> RequestTask {
        return acceptOAuth2ConsentRequestWithRequestBuilder(consentChallenge: consentChallenge, acceptOAuth2ConsentRequest: acceptOAuth2ConsentRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Accept OAuth 2.0 Consent Request
     - PUT /admin/oauth2/auth/requests/consent/accept
     - When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.  The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter consentChallenge: (query) OAuth 2.0 Consent Request Challenge 
     - parameter acceptOAuth2ConsentRequest: (body)  (optional)
     - returns: RequestBuilder<OAuth2RedirectTo> 
     */
    open class func acceptOAuth2ConsentRequestWithRequestBuilder(consentChallenge: String, acceptOAuth2ConsentRequest: AcceptOAuth2ConsentRequest? = nil) -> RequestBuilder<OAuth2RedirectTo> {
        let localVariablePath = "/admin/oauth2/auth/requests/consent/accept"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: acceptOAuth2ConsentRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "consent_challenge": (wrappedValue: consentChallenge.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2RedirectTo>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Accept OAuth 2.0 Login Request
     
     - parameter loginChallenge: (query) OAuth 2.0 Login Request Challenge 
     - parameter acceptOAuth2LoginRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func acceptOAuth2LoginRequest(loginChallenge: String, acceptOAuth2LoginRequest: AcceptOAuth2LoginRequest? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2RedirectTo?, _ error: Error?) -> Void)) -> RequestTask {
        return acceptOAuth2LoginRequestWithRequestBuilder(loginChallenge: loginChallenge, acceptOAuth2LoginRequest: acceptOAuth2LoginRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Accept OAuth 2.0 Login Request
     - PUT /admin/oauth2/auth/requests/login/accept
     - When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject's ID and if Ory should remember the subject's subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter loginChallenge: (query) OAuth 2.0 Login Request Challenge 
     - parameter acceptOAuth2LoginRequest: (body)  (optional)
     - returns: RequestBuilder<OAuth2RedirectTo> 
     */
    open class func acceptOAuth2LoginRequestWithRequestBuilder(loginChallenge: String, acceptOAuth2LoginRequest: AcceptOAuth2LoginRequest? = nil) -> RequestBuilder<OAuth2RedirectTo> {
        let localVariablePath = "/admin/oauth2/auth/requests/login/accept"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: acceptOAuth2LoginRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "login_challenge": (wrappedValue: loginChallenge.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2RedirectTo>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Accept OAuth 2.0 Session Logout Request
     
     - parameter logoutChallenge: (query) OAuth 2.0 Logout Request Challenge 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func acceptOAuth2LogoutRequest(logoutChallenge: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2RedirectTo?, _ error: Error?) -> Void)) -> RequestTask {
        return acceptOAuth2LogoutRequestWithRequestBuilder(logoutChallenge: logoutChallenge).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Accept OAuth 2.0 Session Logout Request
     - PUT /admin/oauth2/auth/requests/logout/accept
     - When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter logoutChallenge: (query) OAuth 2.0 Logout Request Challenge 
     - returns: RequestBuilder<OAuth2RedirectTo> 
     */
    open class func acceptOAuth2LogoutRequestWithRequestBuilder(logoutChallenge: String) -> RequestBuilder<OAuth2RedirectTo> {
        let localVariablePath = "/admin/oauth2/auth/requests/logout/accept"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "logout_challenge": (wrappedValue: logoutChallenge.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2RedirectTo>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create OAuth 2.0 Client
     
     - parameter oAuth2Client: (body) OAuth 2.0 Client Request Body 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createOAuth2Client(oAuth2Client: OAuth2Client, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Client?, _ error: Error?) -> Void)) -> RequestTask {
        return createOAuth2ClientWithRequestBuilder(oAuth2Client: oAuth2Client).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create OAuth 2.0 Client
     - POST /admin/clients
     - Create a new OAuth 2.0 client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter oAuth2Client: (body) OAuth 2.0 Client Request Body 
     - returns: RequestBuilder<OAuth2Client> 
     */
    open class func createOAuth2ClientWithRequestBuilder(oAuth2Client: OAuth2Client) -> RequestBuilder<OAuth2Client> {
        let localVariablePath = "/admin/clients"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuth2Client)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Client>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete OAuth 2.0 Client
     
     - parameter id: (path) The id of the OAuth 2.0 Client. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteOAuth2Client(id: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteOAuth2ClientWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete OAuth 2.0 Client
     - DELETE /admin/clients/{id}
     - Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) The id of the OAuth 2.0 Client. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteOAuth2ClientWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/admin/clients/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
     
     - parameter clientId: (query) OAuth 2.0 Client ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteOAuth2Token(clientId: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteOAuth2TokenWithRequestBuilder(clientId: clientId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
     - DELETE /admin/oauth2/tokens
     - This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter clientId: (query) OAuth 2.0 Client ID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteOAuth2TokenWithRequestBuilder(clientId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/admin/oauth2/tokens"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "client_id": (wrappedValue: clientId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
     
     - parameter id: (path) The id of the desired grant 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteTrustedOAuth2JwtGrantIssuer(id: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteTrustedOAuth2JwtGrantIssuerWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
     - DELETE /admin/trust/grants/jwt-bearer/issuers/{id}
     - Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) The id of the desired grant 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteTrustedOAuth2JwtGrantIssuerWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/admin/trust/grants/jwt-bearer/issuers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get an OAuth 2.0 Client
     
     - parameter id: (path) The id of the OAuth 2.0 Client. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOAuth2Client(id: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Client?, _ error: Error?) -> Void)) -> RequestTask {
        return getOAuth2ClientWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get an OAuth 2.0 Client
     - GET /admin/clients/{id}
     - Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) The id of the OAuth 2.0 Client. 
     - returns: RequestBuilder<OAuth2Client> 
     */
    open class func getOAuth2ClientWithRequestBuilder(id: String) -> RequestBuilder<OAuth2Client> {
        var localVariablePath = "/admin/clients/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Client>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get OAuth 2.0 Consent Request
     
     - parameter consentChallenge: (query) OAuth 2.0 Consent Request Challenge 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOAuth2ConsentRequest(consentChallenge: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2ConsentRequest?, _ error: Error?) -> Void)) -> RequestTask {
        return getOAuth2ConsentRequestWithRequestBuilder(consentChallenge: consentChallenge).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get OAuth 2.0 Consent Request
     - GET /admin/oauth2/auth/requests/consent
     - When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.  The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter consentChallenge: (query) OAuth 2.0 Consent Request Challenge 
     - returns: RequestBuilder<OAuth2ConsentRequest> 
     */
    open class func getOAuth2ConsentRequestWithRequestBuilder(consentChallenge: String) -> RequestBuilder<OAuth2ConsentRequest> {
        let localVariablePath = "/admin/oauth2/auth/requests/consent"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "consent_challenge": (wrappedValue: consentChallenge.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2ConsentRequest>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get OAuth 2.0 Login Request
     
     - parameter loginChallenge: (query) OAuth 2.0 Login Request Challenge 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOAuth2LoginRequest(loginChallenge: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2LoginRequest?, _ error: Error?) -> Void)) -> RequestTask {
        return getOAuth2LoginRequestWithRequestBuilder(loginChallenge: loginChallenge).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get OAuth 2.0 Login Request
     - GET /admin/oauth2/auth/requests/login
     - When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter loginChallenge: (query) OAuth 2.0 Login Request Challenge 
     - returns: RequestBuilder<OAuth2LoginRequest> 
     */
    open class func getOAuth2LoginRequestWithRequestBuilder(loginChallenge: String) -> RequestBuilder<OAuth2LoginRequest> {
        let localVariablePath = "/admin/oauth2/auth/requests/login"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "login_challenge": (wrappedValue: loginChallenge.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2LoginRequest>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get OAuth 2.0 Session Logout Request
     
     - parameter logoutChallenge: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOAuth2LogoutRequest(logoutChallenge: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2LogoutRequest?, _ error: Error?) -> Void)) -> RequestTask {
        return getOAuth2LogoutRequestWithRequestBuilder(logoutChallenge: logoutChallenge).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get OAuth 2.0 Session Logout Request
     - GET /admin/oauth2/auth/requests/logout
     - Use this endpoint to fetch an Ory OAuth 2.0 logout request.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter logoutChallenge: (query)  
     - returns: RequestBuilder<OAuth2LogoutRequest> 
     */
    open class func getOAuth2LogoutRequestWithRequestBuilder(logoutChallenge: String) -> RequestBuilder<OAuth2LogoutRequest> {
        let localVariablePath = "/admin/oauth2/auth/requests/logout"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "logout_challenge": (wrappedValue: logoutChallenge.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2LogoutRequest>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Trusted OAuth2 JWT Bearer Grant Type Issuer
     
     - parameter id: (path) The id of the desired grant 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTrustedOAuth2JwtGrantIssuer(id: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: TrustedOAuth2JwtGrantIssuer?, _ error: Error?) -> Void)) -> RequestTask {
        return getTrustedOAuth2JwtGrantIssuerWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Trusted OAuth2 JWT Bearer Grant Type Issuer
     - GET /admin/trust/grants/jwt-bearer/issuers/{id}
     - Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) The id of the desired grant 
     - returns: RequestBuilder<TrustedOAuth2JwtGrantIssuer> 
     */
    open class func getTrustedOAuth2JwtGrantIssuerWithRequestBuilder(id: String) -> RequestBuilder<TrustedOAuth2JwtGrantIssuer> {
        var localVariablePath = "/admin/trust/grants/jwt-bearer/issuers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TrustedOAuth2JwtGrantIssuer>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Introspect OAuth2 Access and Refresh Tokens
     
     - parameter token: (form) The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned. 
     - parameter scope: (form) An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func introspectOAuth2Token(token: String, scope: String? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: IntrospectedOAuth2Token?, _ error: Error?) -> Void)) -> RequestTask {
        return introspectOAuth2TokenWithRequestBuilder(token: token, scope: scope).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Introspect OAuth2 Access and Refresh Tokens
     - POST /admin/oauth2/introspect
     - The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `session.access_token` during the consent flow.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter token: (form) The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned. 
     - parameter scope: (form) An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     - returns: RequestBuilder<IntrospectedOAuth2Token> 
     */
    open class func introspectOAuth2TokenWithRequestBuilder(token: String, scope: String? = nil) -> RequestBuilder<IntrospectedOAuth2Token> {
        let localVariablePath = "/admin/oauth2/introspect"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "scope": scope?.encodeToJSON(),
            "token": token.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IntrospectedOAuth2Token>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List OAuth 2.0 Clients
     
     - parameter pageSize: (query) Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)
     - parameter pageToken: (query) Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to "1")
     - parameter clientName: (query) The name of the clients to filter by. (optional)
     - parameter owner: (query) The owner of the clients to filter by. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listOAuth2Clients(pageSize: Int64? = nil, pageToken: String? = nil, clientName: String? = nil, owner: String? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: [OAuth2Client]?, _ error: Error?) -> Void)) -> RequestTask {
        return listOAuth2ClientsWithRequestBuilder(pageSize: pageSize, pageToken: pageToken, clientName: clientName, owner: owner).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List OAuth 2.0 Clients
     - GET /admin/clients
     - This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter pageSize: (query) Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)
     - parameter pageToken: (query) Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to "1")
     - parameter clientName: (query) The name of the clients to filter by. (optional)
     - parameter owner: (query) The owner of the clients to filter by. (optional)
     - returns: RequestBuilder<[OAuth2Client]> 
     */
    open class func listOAuth2ClientsWithRequestBuilder(pageSize: Int64? = nil, pageToken: String? = nil, clientName: String? = nil, owner: String? = nil) -> RequestBuilder<[OAuth2Client]> {
        let localVariablePath = "/admin/clients"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "page_token": (wrappedValue: pageToken?.encodeToJSON(), isExplode: true),
            "client_name": (wrappedValue: clientName?.encodeToJSON(), isExplode: true),
            "owner": (wrappedValue: owner?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[OAuth2Client]>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List OAuth 2.0 Consent Sessions of a Subject
     
     - parameter subject: (query) The subject to list the consent sessions for. 
     - parameter pageSize: (query) Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)
     - parameter pageToken: (query) Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to "1")
     - parameter loginSessionId: (query) The login session id to list the consent sessions for. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listOAuth2ConsentSessions(subject: String, pageSize: Int64? = nil, pageToken: String? = nil, loginSessionId: String? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: [OAuth2ConsentSession]?, _ error: Error?) -> Void)) -> RequestTask {
        return listOAuth2ConsentSessionsWithRequestBuilder(subject: subject, pageSize: pageSize, pageToken: pageToken, loginSessionId: loginSessionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List OAuth 2.0 Consent Sessions of a Subject
     - GET /admin/oauth2/auth/sessions/consent
     - This endpoint lists all subject's granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter subject: (query) The subject to list the consent sessions for. 
     - parameter pageSize: (query) Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)
     - parameter pageToken: (query) Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to "1")
     - parameter loginSessionId: (query) The login session id to list the consent sessions for. (optional)
     - returns: RequestBuilder<[OAuth2ConsentSession]> 
     */
    open class func listOAuth2ConsentSessionsWithRequestBuilder(subject: String, pageSize: Int64? = nil, pageToken: String? = nil, loginSessionId: String? = nil) -> RequestBuilder<[OAuth2ConsentSession]> {
        let localVariablePath = "/admin/oauth2/auth/sessions/consent"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "page_token": (wrappedValue: pageToken?.encodeToJSON(), isExplode: true),
            "subject": (wrappedValue: subject.encodeToJSON(), isExplode: true),
            "login_session_id": (wrappedValue: loginSessionId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[OAuth2ConsentSession]>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List Trusted OAuth2 JWT Bearer Grant Type Issuers
     
     - parameter maxItems: (query)  (optional)
     - parameter defaultItems: (query)  (optional)
     - parameter issuer: (query) If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listTrustedOAuth2JwtGrantIssuers(maxItems: Int64? = nil, defaultItems: Int64? = nil, issuer: String? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: [TrustedOAuth2JwtGrantIssuer]?, _ error: Error?) -> Void)) -> RequestTask {
        return listTrustedOAuth2JwtGrantIssuersWithRequestBuilder(maxItems: maxItems, defaultItems: defaultItems, issuer: issuer).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Trusted OAuth2 JWT Bearer Grant Type Issuers
     - GET /admin/trust/grants/jwt-bearer/issuers
     - Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter maxItems: (query)  (optional)
     - parameter defaultItems: (query)  (optional)
     - parameter issuer: (query) If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)
     - returns: RequestBuilder<[TrustedOAuth2JwtGrantIssuer]> 
     */
    open class func listTrustedOAuth2JwtGrantIssuersWithRequestBuilder(maxItems: Int64? = nil, defaultItems: Int64? = nil, issuer: String? = nil) -> RequestBuilder<[TrustedOAuth2JwtGrantIssuer]> {
        let localVariablePath = "/admin/trust/grants/jwt-bearer/issuers"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxItems": (wrappedValue: maxItems?.encodeToJSON(), isExplode: true),
            "DefaultItems": (wrappedValue: defaultItems?.encodeToJSON(), isExplode: true),
            "issuer": (wrappedValue: issuer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TrustedOAuth2JwtGrantIssuer]>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     OAuth 2.0 Authorize Endpoint
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func oAuth2Authorize(apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: ErrorOAuth2?, _ error: Error?) -> Void)) -> RequestTask {
        return oAuth2AuthorizeWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     OAuth 2.0 Authorize Endpoint
     - GET /oauth2/auth
     - Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
     - returns: RequestBuilder<ErrorOAuth2> 
     */
    open class func oAuth2AuthorizeWithRequestBuilder() -> RequestBuilder<ErrorOAuth2> {
        let localVariablePath = "/oauth2/auth"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ErrorOAuth2>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     The OAuth 2.0 Token Endpoint
     
     - parameter grantType: (form)  
     - parameter clientId: (form)  (optional)
     - parameter code: (form)  (optional)
     - parameter redirectUri: (form)  (optional)
     - parameter refreshToken: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func oauth2TokenExchange(grantType: String, clientId: String? = nil, code: String? = nil, redirectUri: String? = nil, refreshToken: String? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2TokenExchange?, _ error: Error?) -> Void)) -> RequestTask {
        return oauth2TokenExchangeWithRequestBuilder(grantType: grantType, clientId: clientId, code: code, redirectUri: redirectUri, refreshToken: refreshToken).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     The OAuth 2.0 Token Endpoint
     - POST /oauth2/token
     - Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
     - BASIC:
       - type: http
       - name: basic
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter grantType: (form)  
     - parameter clientId: (form)  (optional)
     - parameter code: (form)  (optional)
     - parameter redirectUri: (form)  (optional)
     - parameter refreshToken: (form)  (optional)
     - returns: RequestBuilder<OAuth2TokenExchange> 
     */
    open class func oauth2TokenExchangeWithRequestBuilder(grantType: String, clientId: String? = nil, code: String? = nil, redirectUri: String? = nil, refreshToken: String? = nil) -> RequestBuilder<OAuth2TokenExchange> {
        let localVariablePath = "/oauth2/token"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "client_id": clientId?.encodeToJSON(),
            "code": code?.encodeToJSON(),
            "grant_type": grantType.encodeToJSON(),
            "redirect_uri": redirectUri?.encodeToJSON(),
            "refresh_token": refreshToken?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2TokenExchange>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Patch OAuth 2.0 Client
     
     - parameter id: (path) The id of the OAuth 2.0 Client. 
     - parameter jsonPatch: (body) OAuth 2.0 Client JSON Patch Body 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func patchOAuth2Client(id: String, jsonPatch: [JsonPatch], apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Client?, _ error: Error?) -> Void)) -> RequestTask {
        return patchOAuth2ClientWithRequestBuilder(id: id, jsonPatch: jsonPatch).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Patch OAuth 2.0 Client
     - PATCH /admin/clients/{id}
     - Patch an existing OAuth 2.0 Client using JSON Patch. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) The id of the OAuth 2.0 Client. 
     - parameter jsonPatch: (body) OAuth 2.0 Client JSON Patch Body 
     - returns: RequestBuilder<OAuth2Client> 
     */
    open class func patchOAuth2ClientWithRequestBuilder(id: String, jsonPatch: [JsonPatch]) -> RequestBuilder<OAuth2Client> {
        var localVariablePath = "/admin/clients/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: jsonPatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Client>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reject OAuth 2.0 Consent Request
     
     - parameter consentChallenge: (query) OAuth 2.0 Consent Request Challenge 
     - parameter rejectOAuth2Request: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rejectOAuth2ConsentRequest(consentChallenge: String, rejectOAuth2Request: RejectOAuth2Request? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2RedirectTo?, _ error: Error?) -> Void)) -> RequestTask {
        return rejectOAuth2ConsentRequestWithRequestBuilder(consentChallenge: consentChallenge, rejectOAuth2Request: rejectOAuth2Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reject OAuth 2.0 Consent Request
     - PUT /admin/oauth2/auth/requests/consent/reject
     - When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.  The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter consentChallenge: (query) OAuth 2.0 Consent Request Challenge 
     - parameter rejectOAuth2Request: (body)  (optional)
     - returns: RequestBuilder<OAuth2RedirectTo> 
     */
    open class func rejectOAuth2ConsentRequestWithRequestBuilder(consentChallenge: String, rejectOAuth2Request: RejectOAuth2Request? = nil) -> RequestBuilder<OAuth2RedirectTo> {
        let localVariablePath = "/admin/oauth2/auth/requests/consent/reject"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rejectOAuth2Request)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "consent_challenge": (wrappedValue: consentChallenge.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2RedirectTo>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reject OAuth 2.0 Login Request
     
     - parameter loginChallenge: (query) OAuth 2.0 Login Request Challenge 
     - parameter rejectOAuth2Request: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rejectOAuth2LoginRequest(loginChallenge: String, rejectOAuth2Request: RejectOAuth2Request? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2RedirectTo?, _ error: Error?) -> Void)) -> RequestTask {
        return rejectOAuth2LoginRequestWithRequestBuilder(loginChallenge: loginChallenge, rejectOAuth2Request: rejectOAuth2Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reject OAuth 2.0 Login Request
     - PUT /admin/oauth2/auth/requests/login/reject
     - When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter loginChallenge: (query) OAuth 2.0 Login Request Challenge 
     - parameter rejectOAuth2Request: (body)  (optional)
     - returns: RequestBuilder<OAuth2RedirectTo> 
     */
    open class func rejectOAuth2LoginRequestWithRequestBuilder(loginChallenge: String, rejectOAuth2Request: RejectOAuth2Request? = nil) -> RequestBuilder<OAuth2RedirectTo> {
        let localVariablePath = "/admin/oauth2/auth/requests/login/reject"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rejectOAuth2Request)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "login_challenge": (wrappedValue: loginChallenge.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2RedirectTo>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reject OAuth 2.0 Session Logout Request
     
     - parameter logoutChallenge: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rejectOAuth2LogoutRequest(logoutChallenge: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return rejectOAuth2LogoutRequestWithRequestBuilder(logoutChallenge: logoutChallenge).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reject OAuth 2.0 Session Logout Request
     - PUT /admin/oauth2/auth/requests/logout/reject
     - When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter logoutChallenge: (query)  
     - returns: RequestBuilder<Void> 
     */
    open class func rejectOAuth2LogoutRequestWithRequestBuilder(logoutChallenge: String) -> RequestBuilder<Void> {
        let localVariablePath = "/admin/oauth2/auth/requests/logout/reject"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "logout_challenge": (wrappedValue: logoutChallenge.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Revoke OAuth 2.0 Consent Sessions of a Subject
     
     - parameter subject: (query) OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted. 
     - parameter client: (query) OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)
     - parameter all: (query) Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func revokeOAuth2ConsentSessions(subject: String, client: String? = nil, all: Bool? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return revokeOAuth2ConsentSessionsWithRequestBuilder(subject: subject, client: client, all: all).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Revoke OAuth 2.0 Consent Sessions of a Subject
     - DELETE /admin/oauth2/auth/sessions/consent
     - This endpoint revokes a subject's granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter subject: (query) OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted. 
     - parameter client: (query) OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)
     - parameter all: (query) Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func revokeOAuth2ConsentSessionsWithRequestBuilder(subject: String, client: String? = nil, all: Bool? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/admin/oauth2/auth/sessions/consent"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "subject": (wrappedValue: subject.encodeToJSON(), isExplode: true),
            "client": (wrappedValue: client?.encodeToJSON(), isExplode: true),
            "all": (wrappedValue: all?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Revokes All OAuth 2.0 Login Sessions of a Subject
     
     - parameter subject: (query) OAuth 2.0 Subject  The subject to revoke authentication sessions for. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func revokeOAuth2LoginSessions(subject: String, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return revokeOAuth2LoginSessionsWithRequestBuilder(subject: subject).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Revokes All OAuth 2.0 Login Sessions of a Subject
     - DELETE /admin/oauth2/auth/sessions/login
     - This endpoint invalidates a subject's authentication session. After revoking the authentication session, the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter subject: (query) OAuth 2.0 Subject  The subject to revoke authentication sessions for. 
     - returns: RequestBuilder<Void> 
     */
    open class func revokeOAuth2LoginSessionsWithRequestBuilder(subject: String) -> RequestBuilder<Void> {
        let localVariablePath = "/admin/oauth2/auth/sessions/login"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "subject": (wrappedValue: subject.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Revoke OAuth 2.0 Access or Refresh Token
     
     - parameter token: (form)  
     - parameter clientId: (form)  (optional)
     - parameter clientSecret: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func revokeOAuth2Token(token: String, clientId: String? = nil, clientSecret: String? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return revokeOAuth2TokenWithRequestBuilder(token: token, clientId: clientId, clientSecret: clientSecret).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Revoke OAuth 2.0 Access or Refresh Token
     - POST /oauth2/revoke
     - Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     - BASIC:
       - type: http
       - name: basic
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter token: (form)  
     - parameter clientId: (form)  (optional)
     - parameter clientSecret: (form)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func revokeOAuth2TokenWithRequestBuilder(token: String, clientId: String? = nil, clientSecret: String? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/oauth2/revoke"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "client_id": clientId?.encodeToJSON(),
            "client_secret": clientSecret?.encodeToJSON(),
            "token": token.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Set OAuth 2.0 Client
     
     - parameter id: (path) OAuth 2.0 Client ID 
     - parameter oAuth2Client: (body) OAuth 2.0 Client Request Body 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setOAuth2Client(id: String, oAuth2Client: OAuth2Client, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Client?, _ error: Error?) -> Void)) -> RequestTask {
        return setOAuth2ClientWithRequestBuilder(id: id, oAuth2Client: oAuth2Client).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set OAuth 2.0 Client
     - PUT /admin/clients/{id}
     - Replaces an existing OAuth 2.0 Client with the payload you send. If you pass `client_secret` the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) OAuth 2.0 Client ID 
     - parameter oAuth2Client: (body) OAuth 2.0 Client Request Body 
     - returns: RequestBuilder<OAuth2Client> 
     */
    open class func setOAuth2ClientWithRequestBuilder(id: String, oAuth2Client: OAuth2Client) -> RequestBuilder<OAuth2Client> {
        var localVariablePath = "/admin/clients/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuth2Client)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Client>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Set OAuth2 Client Token Lifespans
     
     - parameter id: (path) OAuth 2.0 Client ID 
     - parameter oAuth2ClientTokenLifespans: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setOAuth2ClientLifespans(id: String, oAuth2ClientTokenLifespans: OAuth2ClientTokenLifespans? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Client?, _ error: Error?) -> Void)) -> RequestTask {
        return setOAuth2ClientLifespansWithRequestBuilder(id: id, oAuth2ClientTokenLifespans: oAuth2ClientTokenLifespans).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set OAuth2 Client Token Lifespans
     - PUT /admin/clients/{id}/lifespans
     - Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) OAuth 2.0 Client ID 
     - parameter oAuth2ClientTokenLifespans: (body)  (optional)
     - returns: RequestBuilder<OAuth2Client> 
     */
    open class func setOAuth2ClientLifespansWithRequestBuilder(id: String, oAuth2ClientTokenLifespans: OAuth2ClientTokenLifespans? = nil) -> RequestBuilder<OAuth2Client> {
        var localVariablePath = "/admin/clients/{id}/lifespans"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuth2ClientTokenLifespans)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Client>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Trust OAuth2 JWT Bearer Grant Type Issuer
     
     - parameter trustOAuth2JwtGrantIssuer: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func trustOAuth2JwtGrantIssuer(trustOAuth2JwtGrantIssuer: TrustOAuth2JwtGrantIssuer? = nil, apiResponseQueue: DispatchQueue = OrySDKAPI.apiResponseQueue, completion: @escaping ((_ data: TrustedOAuth2JwtGrantIssuer?, _ error: Error?) -> Void)) -> RequestTask {
        return trustOAuth2JwtGrantIssuerWithRequestBuilder(trustOAuth2JwtGrantIssuer: trustOAuth2JwtGrantIssuer).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Trust OAuth2 JWT Bearer Grant Type Issuer
     - POST /admin/trust/grants/jwt-bearer/issuers
     - Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter trustOAuth2JwtGrantIssuer: (body)  (optional)
     - returns: RequestBuilder<TrustedOAuth2JwtGrantIssuer> 
     */
    open class func trustOAuth2JwtGrantIssuerWithRequestBuilder(trustOAuth2JwtGrantIssuer: TrustOAuth2JwtGrantIssuer? = nil) -> RequestBuilder<TrustedOAuth2JwtGrantIssuer> {
        let localVariablePath = "/admin/trust/grants/jwt-bearer/issuers"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: trustOAuth2JwtGrantIssuer)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TrustedOAuth2JwtGrantIssuer>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
