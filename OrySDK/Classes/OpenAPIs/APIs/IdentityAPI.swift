//
// IdentityAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class IdentityAPI {

    /**
     Create an Identity
     
     - parameter createIdentityBody: (body)  (optional)
     - returns: Identity
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createIdentity(createIdentityBody: CreateIdentityBody? = nil) async throws -> Identity {
        return try await createIdentityWithRequestBuilder(createIdentityBody: createIdentityBody).execute().body
    }

    /**
     Create an Identity
     - POST /admin/identities
     - Create an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model).  This endpoint can also be used to [import credentials](https://www.ory.sh/docs/kratos/manage-identities/import-user-accounts-identities) for instance passwords, social sign in configurations or multifactor methods.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter createIdentityBody: (body)  (optional)
     - returns: RequestBuilder<Identity> 
     */
    open class func createIdentityWithRequestBuilder(createIdentityBody: CreateIdentityBody? = nil) -> RequestBuilder<Identity> {
        let localVariablePath = "/admin/identities"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createIdentityBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Identity>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a Recovery Code
     
     - parameter createRecoveryCodeForIdentityBody: (body)  (optional)
     - returns: RecoveryCodeForIdentity
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createRecoveryCodeForIdentity(createRecoveryCodeForIdentityBody: CreateRecoveryCodeForIdentityBody? = nil) async throws -> RecoveryCodeForIdentity {
        return try await createRecoveryCodeForIdentityWithRequestBuilder(createRecoveryCodeForIdentityBody: createRecoveryCodeForIdentityBody).execute().body
    }

    /**
     Create a Recovery Code
     - POST /admin/recovery/code
     - This endpoint creates a recovery code which should be given to the user in order for them to recover (or activate) their account.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter createRecoveryCodeForIdentityBody: (body)  (optional)
     - returns: RequestBuilder<RecoveryCodeForIdentity> 
     */
    open class func createRecoveryCodeForIdentityWithRequestBuilder(createRecoveryCodeForIdentityBody: CreateRecoveryCodeForIdentityBody? = nil) -> RequestBuilder<RecoveryCodeForIdentity> {
        let localVariablePath = "/admin/recovery/code"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createRecoveryCodeForIdentityBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RecoveryCodeForIdentity>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a Recovery Link
     
     - parameter createRecoveryLinkForIdentityBody: (body)  (optional)
     - returns: RecoveryLinkForIdentity
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createRecoveryLinkForIdentity(createRecoveryLinkForIdentityBody: CreateRecoveryLinkForIdentityBody? = nil) async throws -> RecoveryLinkForIdentity {
        return try await createRecoveryLinkForIdentityWithRequestBuilder(createRecoveryLinkForIdentityBody: createRecoveryLinkForIdentityBody).execute().body
    }

    /**
     Create a Recovery Link
     - POST /admin/recovery/link
     - This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter createRecoveryLinkForIdentityBody: (body)  (optional)
     - returns: RequestBuilder<RecoveryLinkForIdentity> 
     */
    open class func createRecoveryLinkForIdentityWithRequestBuilder(createRecoveryLinkForIdentityBody: CreateRecoveryLinkForIdentityBody? = nil) -> RequestBuilder<RecoveryLinkForIdentity> {
        let localVariablePath = "/admin/recovery/link"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createRecoveryLinkForIdentityBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RecoveryLinkForIdentity>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an Identity
     
     - parameter id: (path) ID is the identity&#39;s ID. 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteIdentity(id: String) async throws {
        return try await deleteIdentityWithRequestBuilder(id: id).execute().body
    }

    /**
     Delete an Identity
     - DELETE /admin/identities/{id}
     - Calling this endpoint irrecoverably and permanently deletes the [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) ID is the identity&#39;s ID. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteIdentityWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/admin/identities/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_deleteIdentityCredentials: String, CaseIterable {
        case totp = "totp"
        case webauthn = "webauthn"
        case lookup = "lookup"
    }

    /**
     Delete a credential for a specific identity
     
     - parameter id: (path) ID is the identity&#39;s ID. 
     - parameter type: (path) Type is the credential&#39;s Type. One of totp, webauthn, lookup 
     - returns: Identity
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteIdentityCredentials(id: String, type: ModelType_deleteIdentityCredentials) async throws -> Identity {
        return try await deleteIdentityCredentialsWithRequestBuilder(id: id, type: type).execute().body
    }

    /**
     Delete a credential for a specific identity
     - DELETE /admin/identities/{id}/credentials/{type}
     - Delete an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) credential by its type You can only delete second factor (aal2) credentials.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) ID is the identity&#39;s ID. 
     - parameter type: (path) Type is the credential&#39;s Type. One of totp, webauthn, lookup 
     - returns: RequestBuilder<Identity> 
     */
    open class func deleteIdentityCredentialsWithRequestBuilder(id: String, type: ModelType_deleteIdentityCredentials) -> RequestBuilder<Identity> {
        var localVariablePath = "/admin/identities/{id}/credentials/{type}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Identity>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete & Invalidate an Identity's Sessions
     
     - parameter id: (path) ID is the identity&#39;s ID. 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteIdentitySessions(id: String) async throws {
        return try await deleteIdentitySessionsWithRequestBuilder(id: id).execute().body
    }

    /**
     Delete & Invalidate an Identity's Sessions
     - DELETE /admin/identities/{id}/sessions
     - Calling this endpoint irrecoverably and permanently deletes and invalidates all sessions that belong to the given Identity.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) ID is the identity&#39;s ID. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteIdentitySessionsWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/admin/identities/{id}/sessions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deactivate a Session
     
     - parameter id: (path) ID is the session&#39;s ID. 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func disableSession(id: String) async throws {
        return try await disableSessionWithRequestBuilder(id: id).execute().body
    }

    /**
     Deactivate a Session
     - DELETE /admin/sessions/{id}
     - Calling this endpoint deactivates the specified session. Session data is not deleted.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) ID is the session&#39;s ID. 
     - returns: RequestBuilder<Void> 
     */
    open class func disableSessionWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/admin/sessions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Extend a Session
     
     - parameter id: (path) ID is the session&#39;s ID. 
     - returns: Session
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func extendSession(id: String) async throws -> Session {
        return try await extendSessionWithRequestBuilder(id: id).execute().body
    }

    /**
     Extend a Session
     - PATCH /admin/sessions/{id}/extend
     - Calling this endpoint extends the given session ID. If `session.earliest_possible_extend` is set it will only extend the session after the specified time has passed.  Retrieve the session ID from the `/sessions/whoami` endpoint / `toSession` SDK method.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) ID is the session&#39;s ID. 
     - returns: RequestBuilder<Session> 
     */
    open class func extendSessionWithRequestBuilder(id: String) -> RequestBuilder<Session> {
        var localVariablePath = "/admin/sessions/{id}/extend"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Session>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get an Identity
     
     - parameter id: (path) ID must be set to the ID of identity you want to get 
     - parameter includeCredential: (query) Include Credentials in Response  Currently, only &#x60;oidc&#x60; is supported. This will return the initial OAuth 2.0 Access, Refresh and (optionally) OpenID Connect ID Token. (optional)
     - returns: Identity
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getIdentity(id: String, includeCredential: [String]? = nil) async throws -> Identity {
        return try await getIdentityWithRequestBuilder(id: id, includeCredential: includeCredential).execute().body
    }

    /**
     Get an Identity
     - GET /admin/identities/{id}
     - Return an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) by its ID. You can optionally include credentials (e.g. social sign in connections) in the response by using the `include_credential` query parameter.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) ID must be set to the ID of identity you want to get 
     - parameter includeCredential: (query) Include Credentials in Response  Currently, only &#x60;oidc&#x60; is supported. This will return the initial OAuth 2.0 Access, Refresh and (optionally) OpenID Connect ID Token. (optional)
     - returns: RequestBuilder<Identity> 
     */
    open class func getIdentityWithRequestBuilder(id: String, includeCredential: [String]? = nil) -> RequestBuilder<Identity> {
        var localVariablePath = "/admin/identities/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_credential": (wrappedValue: includeCredential?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Identity>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Identity JSON Schema
     
     - parameter id: (path) ID must be set to the ID of schema you want to get 
     - returns: AnyCodable
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getIdentitySchema(id: String) async throws -> AnyCodable {
        return try await getIdentitySchemaWithRequestBuilder(id: id).execute().body
    }

    /**
     Get Identity JSON Schema
     - GET /schemas/{id}
     - Return a specific identity schema.
     - parameter id: (path) ID must be set to the ID of schema you want to get 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getIdentitySchemaWithRequestBuilder(id: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/schemas/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter expand
     */
    public enum Expand_getSession: String, CaseIterable {
        // STUB
        case none = ""
    }

    /**
     Get Session
     
     - parameter id: (path) ID is the session&#39;s ID. 
     - parameter expand: (query) ExpandOptions is a query parameter encoded list of all properties that must be expanded in the Session. Example - ?expand&#x3D;Identity&amp;expand&#x3D;Devices If no value is provided, the expandable properties are skipped. (optional)
     - returns: Session
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getSession(id: String, expand: [Expand_getSession]? = nil) async throws -> Session {
        return try await getSessionWithRequestBuilder(id: id, expand: expand).execute().body
    }

    /**
     Get Session
     - GET /admin/sessions/{id}
     - This endpoint is useful for:  Getting a session object with all specified expandables that exist in an administrative context.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) ID is the session&#39;s ID. 
     - parameter expand: (query) ExpandOptions is a query parameter encoded list of all properties that must be expanded in the Session. Example - ?expand&#x3D;Identity&amp;expand&#x3D;Devices If no value is provided, the expandable properties are skipped. (optional)
     - returns: RequestBuilder<Session> 
     */
    open class func getSessionWithRequestBuilder(id: String, expand: [Expand_getSession]? = nil) -> RequestBuilder<Session> {
        var localVariablePath = "/admin/sessions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": (wrappedValue: expand?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Session>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List Identities
     
     - parameter perPage: (query) Items per Page  This is the number of items per page. (optional, default to 250)
     - parameter page: (query) Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist. (optional, default to 1)
     - parameter credentialsIdentifier: (query) CredentialsIdentifier is the identifier (username, email) of the credentials to look up. (optional)
     - returns: [Identity]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listIdentities(perPage: Int64? = nil, page: Int64? = nil, credentialsIdentifier: String? = nil) async throws -> [Identity] {
        return try await listIdentitiesWithRequestBuilder(perPage: perPage, page: page, credentialsIdentifier: credentialsIdentifier).execute().body
    }

    /**
     List Identities
     - GET /admin/identities
     - Lists all [identities](https://www.ory.sh/docs/kratos/concepts/identity-user-model) in the system.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter perPage: (query) Items per Page  This is the number of items per page. (optional, default to 250)
     - parameter page: (query) Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist. (optional, default to 1)
     - parameter credentialsIdentifier: (query) CredentialsIdentifier is the identifier (username, email) of the credentials to look up. (optional)
     - returns: RequestBuilder<[Identity]> 
     */
    open class func listIdentitiesWithRequestBuilder(perPage: Int64? = nil, page: Int64? = nil, credentialsIdentifier: String? = nil) -> RequestBuilder<[Identity]> {
        let localVariablePath = "/admin/identities"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": (wrappedValue: perPage?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "credentials_identifier": (wrappedValue: credentialsIdentifier?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Identity]>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all Identity Schemas
     
     - parameter perPage: (query) Items per Page  This is the number of items per page. (optional, default to 250)
     - parameter page: (query) Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist. (optional, default to 1)
     - returns: [IdentitySchemaContainer]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listIdentitySchemas(perPage: Int64? = nil, page: Int64? = nil) async throws -> [IdentitySchemaContainer] {
        return try await listIdentitySchemasWithRequestBuilder(perPage: perPage, page: page).execute().body
    }

    /**
     Get all Identity Schemas
     - GET /schemas
     - Returns a list of all identity schemas currently in use.
     - parameter perPage: (query) Items per Page  This is the number of items per page. (optional, default to 250)
     - parameter page: (query) Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist. (optional, default to 1)
     - returns: RequestBuilder<[IdentitySchemaContainer]> 
     */
    open class func listIdentitySchemasWithRequestBuilder(perPage: Int64? = nil, page: Int64? = nil) -> RequestBuilder<[IdentitySchemaContainer]> {
        let localVariablePath = "/schemas"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": (wrappedValue: perPage?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[IdentitySchemaContainer]>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List an Identity's Sessions
     
     - parameter id: (path) ID is the identity&#39;s ID. 
     - parameter perPage: (query) Items per Page  This is the number of items per page. (optional, default to 250)
     - parameter page: (query) Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist. (optional, default to 1)
     - parameter active: (query) Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned. (optional)
     - returns: [Session]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listIdentitySessions(id: String, perPage: Int64? = nil, page: Int64? = nil, active: Bool? = nil) async throws -> [Session] {
        return try await listIdentitySessionsWithRequestBuilder(id: id, perPage: perPage, page: page, active: active).execute().body
    }

    /**
     List an Identity's Sessions
     - GET /admin/identities/{id}/sessions
     - This endpoint returns all sessions that belong to the given Identity.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) ID is the identity&#39;s ID. 
     - parameter perPage: (query) Items per Page  This is the number of items per page. (optional, default to 250)
     - parameter page: (query) Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist. (optional, default to 1)
     - parameter active: (query) Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned. (optional)
     - returns: RequestBuilder<[Session]> 
     */
    open class func listIdentitySessionsWithRequestBuilder(id: String, perPage: Int64? = nil, page: Int64? = nil, active: Bool? = nil) -> RequestBuilder<[Session]> {
        var localVariablePath = "/admin/identities/{id}/sessions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": (wrappedValue: perPage?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "active": (wrappedValue: active?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Session]>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter expand
     */
    public enum Expand_listSessions: String, CaseIterable {
        // STUB
        case none = ""
    }

    /**
     List All Sessions
     
     - parameter pageSize: (query) Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)
     - parameter pageToken: (query) Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)
     - parameter active: (query) Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned. (optional)
     - parameter expand: (query) ExpandOptions is a query parameter encoded list of all properties that must be expanded in the Session. If no value is provided, the expandable properties are skipped. (optional)
     - returns: [Session]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listSessions(pageSize: Int64? = nil, pageToken: String? = nil, active: Bool? = nil, expand: [Expand_listSessions]? = nil) async throws -> [Session] {
        return try await listSessionsWithRequestBuilder(pageSize: pageSize, pageToken: pageToken, active: active, expand: expand).execute().body
    }

    /**
     List All Sessions
     - GET /admin/sessions
     - Listing all sessions that exist.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter pageSize: (query) Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)
     - parameter pageToken: (query) Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)
     - parameter active: (query) Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned. (optional)
     - parameter expand: (query) ExpandOptions is a query parameter encoded list of all properties that must be expanded in the Session. If no value is provided, the expandable properties are skipped. (optional)
     - returns: RequestBuilder<[Session]> 
     */
    open class func listSessionsWithRequestBuilder(pageSize: Int64? = nil, pageToken: String? = nil, active: Bool? = nil, expand: [Expand_listSessions]? = nil) -> RequestBuilder<[Session]> {
        let localVariablePath = "/admin/sessions"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "page_token": (wrappedValue: pageToken?.encodeToJSON(), isExplode: true),
            "active": (wrappedValue: active?.encodeToJSON(), isExplode: true),
            "expand": (wrappedValue: expand?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Session]>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Patch an Identity
     
     - parameter id: (path) ID must be set to the ID of identity you want to update 
     - parameter jsonPatch: (body)  (optional)
     - returns: Identity
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func patchIdentity(id: String, jsonPatch: [JsonPatch]? = nil) async throws -> Identity {
        return try await patchIdentityWithRequestBuilder(id: id, jsonPatch: jsonPatch).execute().body
    }

    /**
     Patch an Identity
     - PATCH /admin/identities/{id}
     - Partially updates an [identity's](https://www.ory.sh/docs/kratos/concepts/identity-user-model) field using [JSON Patch](https://jsonpatch.com/). The fields `id`, `stateChangedAt` and `credentials` can not be updated using this method.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) ID must be set to the ID of identity you want to update 
     - parameter jsonPatch: (body)  (optional)
     - returns: RequestBuilder<Identity> 
     */
    open class func patchIdentityWithRequestBuilder(id: String, jsonPatch: [JsonPatch]? = nil) -> RequestBuilder<Identity> {
        var localVariablePath = "/admin/identities/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: jsonPatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Identity>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update an Identity
     
     - parameter id: (path) ID must be set to the ID of identity you want to update 
     - parameter updateIdentityBody: (body)  (optional)
     - returns: Identity
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateIdentity(id: String, updateIdentityBody: UpdateIdentityBody? = nil) async throws -> Identity {
        return try await updateIdentityWithRequestBuilder(id: id, updateIdentityBody: updateIdentityBody).execute().body
    }

    /**
     Update an Identity
     - PUT /admin/identities/{id}
     - This endpoint updates an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model). The full identity payload (except credentials) is expected. It is possible to update the identity's credentials as well.
     - BASIC:
       - type: http
       - name: oryAccessToken
     - parameter id: (path) ID must be set to the ID of identity you want to update 
     - parameter updateIdentityBody: (body)  (optional)
     - returns: RequestBuilder<Identity> 
     */
    open class func updateIdentityWithRequestBuilder(id: String, updateIdentityBody: UpdateIdentityBody? = nil) -> RequestBuilder<Identity> {
        var localVariablePath = "/admin/identities/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateIdentityBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Identity>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
