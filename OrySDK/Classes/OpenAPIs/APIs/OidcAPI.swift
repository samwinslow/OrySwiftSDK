//
// OidcAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OidcAPI {

    /**
     Register OAuth2 Client using OpenID Dynamic Client Registration
     
     - parameter oAuth2Client: (body) Dynamic Client Registration Request Body 
     - returns: OAuth2Client
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createOidcDynamicClient(oAuth2Client: OAuth2Client) async throws -> OAuth2Client {
        return try await createOidcDynamicClientWithRequestBuilder(oAuth2Client: oAuth2Client).execute().body
    }

    /**
     Register OAuth2 Client using OpenID Dynamic Client Registration
     - POST /oauth2/register
     - This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
     - parameter oAuth2Client: (body) Dynamic Client Registration Request Body 
     - returns: RequestBuilder<OAuth2Client> 
     */
    open class func createOidcDynamicClientWithRequestBuilder(oAuth2Client: OAuth2Client) -> RequestBuilder<OAuth2Client> {
        let localVariablePath = "/oauth2/register"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuth2Client)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Client>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Delete OAuth 2.0 Client using the OpenID Dynamic Client Registration Management Protocol
     
     - parameter id: (path) The id of the OAuth 2.0 Client. 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteOidcDynamicClient(id: String) async throws {
        return try await deleteOidcDynamicClientWithRequestBuilder(id: id).execute().body
    }

    /**
     Delete OAuth 2.0 Client using the OpenID Dynamic Client Registration Management Protocol
     - DELETE /oauth2/register/{id}
     - This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client's authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     - BASIC:
       - type: http
       - name: bearer
     - parameter id: (path) The id of the OAuth 2.0 Client. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteOidcDynamicClientWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/oauth2/register/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     OpenID Connect Discovery
     
     - returns: OidcConfiguration
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func discoverOidcConfiguration() async throws -> OidcConfiguration {
        return try await discoverOidcConfigurationWithRequestBuilder().execute().body
    }

    /**
     OpenID Connect Discovery
     - GET /.well-known/openid-configuration
     - A mechanism for an OpenID Connect Relying Party to discover the End-User's OpenID Provider and obtain information needed to interact with it, including its OAuth 2.0 endpoint locations.  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
     - returns: RequestBuilder<OidcConfiguration> 
     */
    open class func discoverOidcConfigurationWithRequestBuilder() -> RequestBuilder<OidcConfiguration> {
        let localVariablePath = "/.well-known/openid-configuration"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OidcConfiguration>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get OAuth2 Client using OpenID Dynamic Client Registration
     
     - parameter id: (path) The id of the OAuth 2.0 Client. 
     - returns: OAuth2Client
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getOidcDynamicClient(id: String) async throws -> OAuth2Client {
        return try await getOidcDynamicClientWithRequestBuilder(id: id).execute().body
    }

    /**
     Get OAuth2 Client using OpenID Dynamic Client Registration
     - GET /oauth2/register/{id}
     - This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol.  To use this endpoint, you will need to present the client's authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.
     - BASIC:
       - type: http
       - name: bearer
     - parameter id: (path) The id of the OAuth 2.0 Client. 
     - returns: RequestBuilder<OAuth2Client> 
     */
    open class func getOidcDynamicClientWithRequestBuilder(id: String) -> RequestBuilder<OAuth2Client> {
        var localVariablePath = "/oauth2/register/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Client>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     OpenID Connect Userinfo
     
     - returns: OidcUserInfo
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getOidcUserInfo() async throws -> OidcUserInfo {
        return try await getOidcUserInfoWithRequestBuilder().execute().body
    }

    /**
     OpenID Connect Userinfo
     - GET /userinfo
     - This endpoint returns the payload of the ID Token, including `session.id_token` values, of the provided OAuth 2.0 Access Token's consent request.  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - returns: RequestBuilder<OidcUserInfo> 
     */
    open class func getOidcUserInfoWithRequestBuilder() -> RequestBuilder<OidcUserInfo> {
        let localVariablePath = "/userinfo"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OidcUserInfo>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     OpenID Connect Front- and Back-channel Enabled Logout
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func revokeOidcSession() async throws {
        return try await revokeOidcSessionWithRequestBuilder().execute().body
    }

    /**
     OpenID Connect Front- and Back-channel Enabled Logout
     - GET /oauth2/sessions/logout
     - This endpoint initiates and completes user logout at the Ory OAuth2 & OpenID provider and initiates OpenID Connect Front- / Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html  Back-channel logout is performed asynchronously and does not affect logout flow.
     - returns: RequestBuilder<Void> 
     */
    open class func revokeOidcSessionWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/oauth2/sessions/logout"
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrySDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Set OAuth2 Client using OpenID Dynamic Client Registration
     
     - parameter id: (path) OAuth 2.0 Client ID 
     - parameter oAuth2Client: (body) OAuth 2.0 Client Request Body 
     - returns: OAuth2Client
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func setOidcDynamicClient(id: String, oAuth2Client: OAuth2Client) async throws -> OAuth2Client {
        return try await setOidcDynamicClientWithRequestBuilder(id: id, oAuth2Client: oAuth2Client).execute().body
    }

    /**
     Set OAuth2 Client using OpenID Dynamic Client Registration
     - PUT /oauth2/register/{id}
     - This endpoint behaves like the administrative counterpart (`setOAuth2Client`) but is capable of facing the public internet directly to be used by third parties. It implements the OpenID Connect Dynamic Client Registration Protocol.  This feature is disabled per default. It can be enabled by a system administrator.  If you pass `client_secret` the secret is used, otherwise the existing secret is used. If set, the secret is echoed in the response. It is not possible to retrieve it later on.  To use this endpoint, you will need to present the client's authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     - BASIC:
       - type: http
       - name: bearer
     - parameter id: (path) OAuth 2.0 Client ID 
     - parameter oAuth2Client: (body) OAuth 2.0 Client Request Body 
     - returns: RequestBuilder<OAuth2Client> 
     */
    open class func setOidcDynamicClientWithRequestBuilder(id: String, oAuth2Client: OAuth2Client) -> RequestBuilder<OAuth2Client> {
        var localVariablePath = "/oauth2/register/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OrySDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuth2Client)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Client>.Type = OrySDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
